/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mostml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mostml.services.MoStMLGrammarAccess;

@SuppressWarnings("all")
public class MoStMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MoStMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ARITHMETICCONDITION_IDTerminalRuleCall_2_a;
	protected AbstractElementAlias match_ATTRIBUTECONTION_IDTerminalRuleCall_1_a;
	protected AbstractElementAlias match_Environment_IDTerminalRuleCall_3_a;
	protected AbstractElementAlias match_Environment_IDTerminalRuleCall_5_a;
	protected AbstractElementAlias match_MODECONDITION_IDTerminalRuleCall_1_a;
	protected AbstractElementAlias match_NLRequirement_IDTerminalRuleCall_2_a;
	protected AbstractElementAlias match_SIGNALCONDITION_IDTerminalRuleCall_1_a;
	protected AbstractElementAlias match_STATECONDITON_IDTerminalRuleCall_0_1_a;
	protected AbstractElementAlias match_STATECONDITON_IDTerminalRuleCall_1_0_0_a;
	protected AbstractElementAlias match_STATECONDITON_IDTerminalRuleCall_1_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MoStMLGrammarAccess) access;
		match_ARITHMETICCONDITION_IDTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getARITHMETICCONDITIONAccess().getIDTerminalRuleCall_2());
		match_ATTRIBUTECONTION_IDTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getATTRIBUTECONTIONAccess().getIDTerminalRuleCall_1());
		match_Environment_IDTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getEnvironmentAccess().getIDTerminalRuleCall_3());
		match_Environment_IDTerminalRuleCall_5_a = new TokenAlias(true, true, grammarAccess.getEnvironmentAccess().getIDTerminalRuleCall_5());
		match_MODECONDITION_IDTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getMODECONDITIONAccess().getIDTerminalRuleCall_1());
		match_NLRequirement_IDTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getNLRequirementAccess().getIDTerminalRuleCall_2());
		match_SIGNALCONDITION_IDTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getSIGNALCONDITIONAccess().getIDTerminalRuleCall_1());
		match_STATECONDITON_IDTerminalRuleCall_0_1_a = new TokenAlias(true, true, grammarAccess.getSTATECONDITONAccess().getIDTerminalRuleCall_0_1());
		match_STATECONDITON_IDTerminalRuleCall_1_0_0_a = new TokenAlias(true, true, grammarAccess.getSTATECONDITONAccess().getIDTerminalRuleCall_1_0_0());
		match_STATECONDITON_IDTerminalRuleCall_1_1_a = new TokenAlias(true, true, grammarAccess.getSTATECONDITONAccess().getIDTerminalRuleCall_1_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ARITHMETICCONDITION_IDTerminalRuleCall_2_a.equals(syntax))
				emit_ARITHMETICCONDITION_IDTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ATTRIBUTECONTION_IDTerminalRuleCall_1_a.equals(syntax))
				emit_ATTRIBUTECONTION_IDTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Environment_IDTerminalRuleCall_3_a.equals(syntax))
				emit_Environment_IDTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Environment_IDTerminalRuleCall_5_a.equals(syntax))
				emit_Environment_IDTerminalRuleCall_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MODECONDITION_IDTerminalRuleCall_1_a.equals(syntax))
				emit_MODECONDITION_IDTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NLRequirement_IDTerminalRuleCall_2_a.equals(syntax))
				emit_NLRequirement_IDTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SIGNALCONDITION_IDTerminalRuleCall_1_a.equals(syntax))
				emit_SIGNALCONDITION_IDTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STATECONDITON_IDTerminalRuleCall_0_1_a.equals(syntax))
				emit_STATECONDITON_IDTerminalRuleCall_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STATECONDITON_IDTerminalRuleCall_1_0_0_a.equals(syntax))
				emit_STATECONDITON_IDTerminalRuleCall_1_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STATECONDITON_IDTerminalRuleCall_1_1_a.equals(syntax))
				emit_STATECONDITON_IDTerminalRuleCall_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     result=ID (ambiguity) compcondition=COMPARISONOPERATOR
	 
	 * </pre>
	 */
	protected void emit_ARITHMETICCONDITION_IDTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) attributeName=ID
	 
	 * </pre>
	 */
	protected void emit_ATTRIBUTECONTION_IDTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     envirVariable=ID (ambiguity) 'initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
	 *     envirVariable=ID (ambiguity) range=RANG
	 
	 * </pre>
	 */
	protected void emit_Environment_IDTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     envirAttributeValue=ATTRIBUTEVALUE (ambiguity) '.' (rule end)
	 *     envirUnit+=UNIT (ambiguity) '.' (rule end)
	 *     range=RANG (ambiguity) '.' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Environment_IDTerminalRuleCall_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) 'mode' modeName=ID
	 
	 * </pre>
	 */
	protected void emit_MODECONDITION_IDTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     nlReqID=ReqID ID (ambiguity) '.' (rule end)
	 
	 * </pre>
	 */
	protected void emit_NLRequirement_IDTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) 'receives' signalName=ID
	 
	 * </pre>
	 */
	protected void emit_SIGNALCONDITION_IDTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) 'state' stateName=ID
	 
	 * </pre>
	 */
	protected void emit_STATECONDITON_IDTerminalRuleCall_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) compOperator=COMPARISONOPERATOR
	 
	 * </pre>
	 */
	protected void emit_STATECONDITON_IDTerminalRuleCall_1_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID*
	 *
	 * This ambiguous syntax occurs at:
	 *     compOperator=COMPARISONOPERATOR (ambiguity) 'state' stateName=ID
	 
	 * </pre>
	 */
	protected void emit_STATECONDITON_IDTerminalRuleCall_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
