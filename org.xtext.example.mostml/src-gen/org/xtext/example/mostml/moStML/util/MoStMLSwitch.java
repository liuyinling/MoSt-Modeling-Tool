/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mostml.moStML.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mostml.moStML.MoStMLPackage
 * @generated
 */
public class MoStMLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MoStMLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoStMLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MoStMLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MoStMLPackage.MO_ST:
      {
        MoSt moSt = (MoSt)theEObject;
        T result = caseMoSt(moSt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.NL_REQUIREMENT:
      {
        NLRequirement nlRequirement = (NLRequirement)theEObject;
        T result = caseNLRequirement(nlRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.REQUIREMENT:
      {
        Requirement requirement = (Requirement)theEObject;
        T result = caseRequirement(requirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ENVIRONMENT:
      {
        Environment environment = (Environment)theEObject;
        T result = caseEnvironment(environment);
        if (result == null) result = caseRequirement(environment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.MODE:
      {
        MODE mode = (MODE)theEObject;
        T result = caseMODE(mode);
        if (result == null) result = caseRequirement(mode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.STATE:
      {
        STATE state = (STATE)theEObject;
        T result = caseSTATE(state);
        if (result == null) result = caseRequirement(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.CONSTRAINT:
      {
        CONSTRAINT constraint = (CONSTRAINT)theEObject;
        T result = caseCONSTRAINT(constraint);
        if (result == null) result = caseRequirement(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.PROPERTY:
      {
        PROPERTY property = (PROPERTY)theEObject;
        T result = casePROPERTY(property);
        if (result == null) result = caseRequirement(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.RANG:
      {
        RANG rang = (RANG)theEObject;
        T result = caseRANG(rang);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.CTL_OPERATOR:
      {
        CTLOperator ctlOperator = (CTLOperator)theEObject;
        T result = caseCTLOperator(ctlOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.AX:
      {
        AX ax = (AX)theEObject;
        T result = caseAX(ax);
        if (result == null) result = caseCTLOperator(ax);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.EG:
      {
        EG eg = (EG)theEObject;
        T result = caseEG(eg);
        if (result == null) result = caseCTLOperator(eg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.EF:
      {
        EF ef = (EF)theEObject;
        T result = caseEF(ef);
        if (result == null) result = caseCTLOperator(ef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.AF:
      {
        AF af = (AF)theEObject;
        T result = caseAF(af);
        if (result == null) result = caseCTLOperator(af);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.AG:
      {
        AG ag = (AG)theEObject;
        T result = caseAG(ag);
        if (result == null) result = caseCTLOperator(ag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.LTL_OPERATOR:
      {
        LTLOperator ltlOperator = (LTLOperator)theEObject;
        T result = caseLTLOperator(ltlOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.F:
      {
        F f = (F)theEObject;
        T result = caseF(f);
        if (result == null) result = caseLTLOperator(f);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.G:
      {
        G g = (G)theEObject;
        T result = caseG(g);
        if (result == null) result = caseLTLOperator(g);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.X:
      {
        X x = (X)theEObject;
        T result = caseX(x);
        if (result == null) result = caseLTLOperator(x);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.RELATION:
      {
        RELATION relation = (RELATION)theEObject;
        T result = caseRELATION(relation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.SIGNALCONDITION:
      {
        SIGNALCONDITION signalcondition = (SIGNALCONDITION)theEObject;
        T result = caseSIGNALCONDITION(signalcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.REQ_ID:
      {
        ReqID reqID = (ReqID)theEObject;
        T result = caseReqID(reqID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ATTRIBUTECONTION:
      {
        ATTRIBUTECONTION attributecontion = (ATTRIBUTECONTION)theEObject;
        T result = caseATTRIBUTECONTION(attributecontion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.UNIT:
      {
        UNIT unit = (UNIT)theEObject;
        T result = caseUNIT(unit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.WEIGHT:
      {
        WEIGHT weight = (WEIGHT)theEObject;
        T result = caseWEIGHT(weight);
        if (result == null) result = caseUNIT(weight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.TIME:
      {
        TIME time = (TIME)theEObject;
        T result = caseTIME(time);
        if (result == null) result = caseUNIT(time);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.SPEED:
      {
        SPEED speed = (SPEED)theEObject;
        T result = caseSPEED(speed);
        if (result == null) result = caseUNIT(speed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ATTRIBUTEVALUE:
      {
        ATTRIBUTEVALUE attributevalue = (ATTRIBUTEVALUE)theEObject;
        T result = caseATTRIBUTEVALUE(attributevalue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.STRINGTYPE:
      {
        STRINGTYPE stringtype = (STRINGTYPE)theEObject;
        T result = caseSTRINGTYPE(stringtype);
        if (result == null) result = caseATTRIBUTEVALUE(stringtype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.INTTYPE:
      {
        INTTYPE inttype = (INTTYPE)theEObject;
        T result = caseINTTYPE(inttype);
        if (result == null) result = caseATTRIBUTEVALUE(inttype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.BOOLEANTYPE:
      {
        BOOLEANTYPE booleantype = (BOOLEANTYPE)theEObject;
        T result = caseBOOLEANTYPE(booleantype);
        if (result == null) result = caseATTRIBUTEVALUE(booleantype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.STATECONDITON:
      {
        STATECONDITON stateconditon = (STATECONDITON)theEObject;
        T result = caseSTATECONDITON(stateconditon);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.MODECONDITION:
      {
        MODECONDITION modecondition = (MODECONDITION)theEObject;
        T result = caseMODECONDITION(modecondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ARITHMETICCONDITION:
      {
        ARITHMETICCONDITION arithmeticcondition = (ARITHMETICCONDITION)theEObject;
        T result = caseARITHMETICCONDITION(arithmeticcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ARITHMETICOPERATOR:
      {
        ARITHMETICOPERATOR arithmeticoperator = (ARITHMETICOPERATOR)theEObject;
        T result = caseARITHMETICOPERATOR(arithmeticoperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.MODULE:
      {
        MODULE module = (MODULE)theEObject;
        T result = caseMODULE(module);
        if (result == null) result = caseARITHMETICOPERATOR(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.DIVISION:
      {
        DIVISION division = (DIVISION)theEObject;
        T result = caseDIVISION(division);
        if (result == null) result = caseARITHMETICOPERATOR(division);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.MULTIPLICATION:
      {
        MULTIPLICATION multiplication = (MULTIPLICATION)theEObject;
        T result = caseMULTIPLICATION(multiplication);
        if (result == null) result = caseARITHMETICOPERATOR(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.SUBTRACTION:
      {
        SUBTRACTION subtraction = (SUBTRACTION)theEObject;
        T result = caseSUBTRACTION(subtraction);
        if (result == null) result = caseARITHMETICOPERATOR(subtraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.ADD:
      {
        ADD add = (ADD)theEObject;
        T result = caseADD(add);
        if (result == null) result = caseARITHMETICOPERATOR(add);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.COMPARISONOPERATOR:
      {
        COMPARISONOPERATOR comparisonoperator = (COMPARISONOPERATOR)theEObject;
        T result = caseCOMPARISONOPERATOR(comparisonoperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.NOT:
      {
        NOT not = (NOT)theEObject;
        T result = caseNOT(not);
        if (result == null) result = caseCOMPARISONOPERATOR(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.GREATEQUAL:
      {
        GREATEQUAL greatequal = (GREATEQUAL)theEObject;
        T result = caseGREATEQUAL(greatequal);
        if (result == null) result = caseCOMPARISONOPERATOR(greatequal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.LESSEQUAL:
      {
        LESSEQUAL lessequal = (LESSEQUAL)theEObject;
        T result = caseLESSEQUAL(lessequal);
        if (result == null) result = caseCOMPARISONOPERATOR(lessequal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.NOTEQUAL:
      {
        NOTEQUAL notequal = (NOTEQUAL)theEObject;
        T result = caseNOTEQUAL(notequal);
        if (result == null) result = caseCOMPARISONOPERATOR(notequal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.GREATER:
      {
        GREATER greater = (GREATER)theEObject;
        T result = caseGREATER(greater);
        if (result == null) result = caseCOMPARISONOPERATOR(greater);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.LESS:
      {
        LESS less = (LESS)theEObject;
        T result = caseLESS(less);
        if (result == null) result = caseCOMPARISONOPERATOR(less);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MoStMLPackage.EQUAL:
      {
        EQUAL equal = (EQUAL)theEObject;
        T result = caseEQUAL(equal);
        if (result == null) result = caseCOMPARISONOPERATOR(equal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mo St</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mo St</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMoSt(MoSt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NL Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NL Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNLRequirement(NLRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirement(Requirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Environment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Environment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnvironment(Environment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MODE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MODE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMODE(MODE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STATE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STATE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTATE(STATE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CONSTRAINT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CONSTRAINT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCONSTRAINT(CONSTRAINT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PROPERTY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PROPERTY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePROPERTY(PROPERTY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RANG</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RANG</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRANG(RANG object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CTL Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CTL Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCTLOperator(CTLOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AX</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AX</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAX(AX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EG</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EG</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEG(EG object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEF(EF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAF(AF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AG</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AG</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAG(AG object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LTL Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LTL Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLTLOperator(LTLOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>F</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>F</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseF(F object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>G</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>G</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseG(G object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>X</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>X</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseX(X object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RELATION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RELATION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRELATION(RELATION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SIGNALCONDITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SIGNALCONDITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIGNALCONDITION(SIGNALCONDITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqID(ReqID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ATTRIBUTECONTION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ATTRIBUTECONTION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseATTRIBUTECONTION(ATTRIBUTECONTION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UNIT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UNIT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUNIT(UNIT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WEIGHT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WEIGHT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWEIGHT(WEIGHT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TIME</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TIME</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTIME(TIME object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SPEED</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SPEED</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSPEED(SPEED object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ATTRIBUTEVALUE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ATTRIBUTEVALUE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseATTRIBUTEVALUE(ATTRIBUTEVALUE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STRINGTYPE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STRINGTYPE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTRINGTYPE(STRINGTYPE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INTTYPE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INTTYPE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINTTYPE(INTTYPE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BOOLEANTYPE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BOOLEANTYPE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBOOLEANTYPE(BOOLEANTYPE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STATECONDITON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STATECONDITON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTATECONDITON(STATECONDITON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MODECONDITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MODECONDITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMODECONDITION(MODECONDITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ARITHMETICCONDITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ARITHMETICCONDITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARITHMETICCONDITION(ARITHMETICCONDITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ARITHMETICOPERATOR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ARITHMETICOPERATOR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARITHMETICOPERATOR(ARITHMETICOPERATOR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MODULE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MODULE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMODULE(MODULE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DIVISION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DIVISION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDIVISION(DIVISION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MULTIPLICATION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MULTIPLICATION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMULTIPLICATION(MULTIPLICATION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SUBTRACTION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SUBTRACTION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSUBTRACTION(SUBTRACTION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ADD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ADD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseADD(ADD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COMPARISONOPERATOR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COMPARISONOPERATOR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOMPARISONOPERATOR(COMPARISONOPERATOR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NOT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NOT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNOT(NOT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>GREATEQUAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>GREATEQUAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGREATEQUAL(GREATEQUAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LESSEQUAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LESSEQUAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLESSEQUAL(LESSEQUAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NOTEQUAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NOTEQUAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNOTEQUAL(NOTEQUAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>GREATER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>GREATER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGREATER(GREATER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LESS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LESS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLESS(LESS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EQUAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EQUAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEQUAL(EQUAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MoStMLSwitch
