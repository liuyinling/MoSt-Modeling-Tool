/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mostml.moStML.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mostml.moStML.MoStMLPackage
 * @generated
 */
public class MoStMLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MoStMLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoStMLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MoStMLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoStMLSwitch<Adapter> modelSwitch =
    new MoStMLSwitch<Adapter>()
    {
      @Override
      public Adapter caseMoSt(MoSt object)
      {
        return createMoStAdapter();
      }
      @Override
      public Adapter caseNLRequirement(NLRequirement object)
      {
        return createNLRequirementAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseEnvironment(Environment object)
      {
        return createEnvironmentAdapter();
      }
      @Override
      public Adapter caseMODE(MODE object)
      {
        return createMODEAdapter();
      }
      @Override
      public Adapter caseSTATE(STATE object)
      {
        return createSTATEAdapter();
      }
      @Override
      public Adapter caseCONSTRAINT(CONSTRAINT object)
      {
        return createCONSTRAINTAdapter();
      }
      @Override
      public Adapter casePROPERTY(PROPERTY object)
      {
        return createPROPERTYAdapter();
      }
      @Override
      public Adapter caseRANG(RANG object)
      {
        return createRANGAdapter();
      }
      @Override
      public Adapter caseCTLOperator(CTLOperator object)
      {
        return createCTLOperatorAdapter();
      }
      @Override
      public Adapter caseAX(AX object)
      {
        return createAXAdapter();
      }
      @Override
      public Adapter caseEG(EG object)
      {
        return createEGAdapter();
      }
      @Override
      public Adapter caseEF(EF object)
      {
        return createEFAdapter();
      }
      @Override
      public Adapter caseAF(AF object)
      {
        return createAFAdapter();
      }
      @Override
      public Adapter caseAG(AG object)
      {
        return createAGAdapter();
      }
      @Override
      public Adapter caseLTLOperator(LTLOperator object)
      {
        return createLTLOperatorAdapter();
      }
      @Override
      public Adapter caseF(F object)
      {
        return createFAdapter();
      }
      @Override
      public Adapter caseG(G object)
      {
        return createGAdapter();
      }
      @Override
      public Adapter caseX(X object)
      {
        return createXAdapter();
      }
      @Override
      public Adapter caseRELATION(RELATION object)
      {
        return createRELATIONAdapter();
      }
      @Override
      public Adapter caseSIGNALCONDITION(SIGNALCONDITION object)
      {
        return createSIGNALCONDITIONAdapter();
      }
      @Override
      public Adapter caseReqID(ReqID object)
      {
        return createReqIDAdapter();
      }
      @Override
      public Adapter caseATTRIBUTECONTION(ATTRIBUTECONTION object)
      {
        return createATTRIBUTECONTIONAdapter();
      }
      @Override
      public Adapter caseUNIT(UNIT object)
      {
        return createUNITAdapter();
      }
      @Override
      public Adapter caseWEIGHT(WEIGHT object)
      {
        return createWEIGHTAdapter();
      }
      @Override
      public Adapter caseTIME(TIME object)
      {
        return createTIMEAdapter();
      }
      @Override
      public Adapter caseSPEED(SPEED object)
      {
        return createSPEEDAdapter();
      }
      @Override
      public Adapter caseATTRIBUTEVALUE(ATTRIBUTEVALUE object)
      {
        return createATTRIBUTEVALUEAdapter();
      }
      @Override
      public Adapter caseSTRINGTYPE(STRINGTYPE object)
      {
        return createSTRINGTYPEAdapter();
      }
      @Override
      public Adapter caseINTTYPE(INTTYPE object)
      {
        return createINTTYPEAdapter();
      }
      @Override
      public Adapter caseBOOLEANTYPE(BOOLEANTYPE object)
      {
        return createBOOLEANTYPEAdapter();
      }
      @Override
      public Adapter caseSTATECONDITON(STATECONDITON object)
      {
        return createSTATECONDITONAdapter();
      }
      @Override
      public Adapter caseMODECONDITION(MODECONDITION object)
      {
        return createMODECONDITIONAdapter();
      }
      @Override
      public Adapter caseARITHMETICCONDITION(ARITHMETICCONDITION object)
      {
        return createARITHMETICCONDITIONAdapter();
      }
      @Override
      public Adapter caseARITHMETICOPERATOR(ARITHMETICOPERATOR object)
      {
        return createARITHMETICOPERATORAdapter();
      }
      @Override
      public Adapter caseMODULE(MODULE object)
      {
        return createMODULEAdapter();
      }
      @Override
      public Adapter caseDIVISION(DIVISION object)
      {
        return createDIVISIONAdapter();
      }
      @Override
      public Adapter caseMULTIPLICATION(MULTIPLICATION object)
      {
        return createMULTIPLICATIONAdapter();
      }
      @Override
      public Adapter caseSUBTRACTION(SUBTRACTION object)
      {
        return createSUBTRACTIONAdapter();
      }
      @Override
      public Adapter caseADD(ADD object)
      {
        return createADDAdapter();
      }
      @Override
      public Adapter caseCOMPARISONOPERATOR(COMPARISONOPERATOR object)
      {
        return createCOMPARISONOPERATORAdapter();
      }
      @Override
      public Adapter caseNOT(NOT object)
      {
        return createNOTAdapter();
      }
      @Override
      public Adapter caseGREATEQUAL(GREATEQUAL object)
      {
        return createGREATEQUALAdapter();
      }
      @Override
      public Adapter caseLESSEQUAL(LESSEQUAL object)
      {
        return createLESSEQUALAdapter();
      }
      @Override
      public Adapter caseNOTEQUAL(NOTEQUAL object)
      {
        return createNOTEQUALAdapter();
      }
      @Override
      public Adapter caseGREATER(GREATER object)
      {
        return createGREATERAdapter();
      }
      @Override
      public Adapter caseLESS(LESS object)
      {
        return createLESSAdapter();
      }
      @Override
      public Adapter caseEQUAL(EQUAL object)
      {
        return createEQUALAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.MoSt <em>Mo St</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.MoSt
   * @generated
   */
  public Adapter createMoStAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.NLRequirement <em>NL Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.NLRequirement
   * @generated
   */
  public Adapter createNLRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.Environment <em>Environment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.Environment
   * @generated
   */
  public Adapter createEnvironmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.MODE <em>MODE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.MODE
   * @generated
   */
  public Adapter createMODEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.STATE <em>STATE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.STATE
   * @generated
   */
  public Adapter createSTATEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.CONSTRAINT <em>CONSTRAINT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.CONSTRAINT
   * @generated
   */
  public Adapter createCONSTRAINTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.PROPERTY <em>PROPERTY</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.PROPERTY
   * @generated
   */
  public Adapter createPROPERTYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.RANG <em>RANG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.RANG
   * @generated
   */
  public Adapter createRANGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.CTLOperator <em>CTL Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.CTLOperator
   * @generated
   */
  public Adapter createCTLOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.AX <em>AX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.AX
   * @generated
   */
  public Adapter createAXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.EG <em>EG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.EG
   * @generated
   */
  public Adapter createEGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.EF <em>EF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.EF
   * @generated
   */
  public Adapter createEFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.AF <em>AF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.AF
   * @generated
   */
  public Adapter createAFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.AG <em>AG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.AG
   * @generated
   */
  public Adapter createAGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.LTLOperator <em>LTL Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.LTLOperator
   * @generated
   */
  public Adapter createLTLOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.F <em>F</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.F
   * @generated
   */
  public Adapter createFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.G <em>G</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.G
   * @generated
   */
  public Adapter createGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.X <em>X</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.X
   * @generated
   */
  public Adapter createXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.RELATION <em>RELATION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.RELATION
   * @generated
   */
  public Adapter createRELATIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.SIGNALCONDITION <em>SIGNALCONDITION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.SIGNALCONDITION
   * @generated
   */
  public Adapter createSIGNALCONDITIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ReqID <em>Req ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ReqID
   * @generated
   */
  public Adapter createReqIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ATTRIBUTECONTION <em>ATTRIBUTECONTION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ATTRIBUTECONTION
   * @generated
   */
  public Adapter createATTRIBUTECONTIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.UNIT <em>UNIT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.UNIT
   * @generated
   */
  public Adapter createUNITAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.WEIGHT <em>WEIGHT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.WEIGHT
   * @generated
   */
  public Adapter createWEIGHTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.TIME <em>TIME</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.TIME
   * @generated
   */
  public Adapter createTIMEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.SPEED <em>SPEED</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.SPEED
   * @generated
   */
  public Adapter createSPEEDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ATTRIBUTEVALUE <em>ATTRIBUTEVALUE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ATTRIBUTEVALUE
   * @generated
   */
  public Adapter createATTRIBUTEVALUEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.STRINGTYPE <em>STRINGTYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.STRINGTYPE
   * @generated
   */
  public Adapter createSTRINGTYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.INTTYPE <em>INTTYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.INTTYPE
   * @generated
   */
  public Adapter createINTTYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.BOOLEANTYPE <em>BOOLEANTYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.BOOLEANTYPE
   * @generated
   */
  public Adapter createBOOLEANTYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.STATECONDITON <em>STATECONDITON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.STATECONDITON
   * @generated
   */
  public Adapter createSTATECONDITONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.MODECONDITION <em>MODECONDITION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.MODECONDITION
   * @generated
   */
  public Adapter createMODECONDITIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ARITHMETICCONDITION <em>ARITHMETICCONDITION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ARITHMETICCONDITION
   * @generated
   */
  public Adapter createARITHMETICCONDITIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ARITHMETICOPERATOR <em>ARITHMETICOPERATOR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ARITHMETICOPERATOR
   * @generated
   */
  public Adapter createARITHMETICOPERATORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.MODULE <em>MODULE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.MODULE
   * @generated
   */
  public Adapter createMODULEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.DIVISION <em>DIVISION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.DIVISION
   * @generated
   */
  public Adapter createDIVISIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.MULTIPLICATION <em>MULTIPLICATION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.MULTIPLICATION
   * @generated
   */
  public Adapter createMULTIPLICATIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.SUBTRACTION <em>SUBTRACTION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.SUBTRACTION
   * @generated
   */
  public Adapter createSUBTRACTIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.ADD <em>ADD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.ADD
   * @generated
   */
  public Adapter createADDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.COMPARISONOPERATOR <em>COMPARISONOPERATOR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.COMPARISONOPERATOR
   * @generated
   */
  public Adapter createCOMPARISONOPERATORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.NOT <em>NOT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.NOT
   * @generated
   */
  public Adapter createNOTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.GREATEQUAL <em>GREATEQUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.GREATEQUAL
   * @generated
   */
  public Adapter createGREATEQUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.LESSEQUAL <em>LESSEQUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.LESSEQUAL
   * @generated
   */
  public Adapter createLESSEQUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.NOTEQUAL <em>NOTEQUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.NOTEQUAL
   * @generated
   */
  public Adapter createNOTEQUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.GREATER <em>GREATER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.GREATER
   * @generated
   */
  public Adapter createGREATERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.LESS <em>LESS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.LESS
   * @generated
   */
  public Adapter createLESSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mostml.moStML.EQUAL <em>EQUAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mostml.moStML.EQUAL
   * @generated
   */
  public Adapter createEQUALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MoStMLAdapterFactory
