/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mostml.moStML.CTLOperator;
import org.xtext.example.mostml.moStML.Environment;
import org.xtext.example.mostml.moStML.LTLOperator;
import org.xtext.example.mostml.moStML.MoSt;
import org.xtext.example.mostml.moStML.MoStMLFactory;
import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.NLRequirement;
import org.xtext.example.mostml.moStML.ReqID;
import org.xtext.example.mostml.moStML.Requirement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MoStMLPackageImpl extends EPackageImpl implements MoStMLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moStEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nlRequirementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass requirementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass environmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rangEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ctlOperatorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass axEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass egEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass efEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass afEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass agEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ltlOperatorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass gEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signalconditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass reqIDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attributecontionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass accEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass weightEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass timeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass speedEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attributevalueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringtypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inttypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleantypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stateconditonEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modeconditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticconditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticoperatorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass divisionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiplicationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subtractionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass comparisonoperatorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass greatequalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lessequalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notequalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass greaterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass equalEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mostml.moStML.MoStMLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MoStMLPackageImpl()
  {
    super(eNS_URI, MoStMLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MoStMLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MoStMLPackage init()
  {
    if (isInited) return (MoStMLPackage)EPackage.Registry.INSTANCE.getEPackage(MoStMLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMoStMLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MoStMLPackageImpl theMoStMLPackage = registeredMoStMLPackage instanceof MoStMLPackageImpl ? (MoStMLPackageImpl)registeredMoStMLPackage : new MoStMLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMoStMLPackage.createPackageContents();

    // Initialize created meta-data
    theMoStMLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMoStMLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MoStMLPackage.eNS_URI, theMoStMLPackage);
    return theMoStMLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoSt()
  {
    return moStEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoSt_Model()
  {
    return (EReference)moStEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNLRequirement()
  {
    return nlRequirementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNLRequirement_NlReqID()
  {
    return (EReference)nlRequirementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRequirement()
  {
    return requirementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnvironment()
  {
    return environmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnvironment_EnvirReqID()
  {
    return (EReference)environmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEnvironment_EnvirVariable()
  {
    return (EAttribute)environmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnvironment_EnvirAttributeValue()
  {
    return (EReference)environmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnvironment_EnvirUnit()
  {
    return (EReference)environmentEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnvironment_Range()
  {
    return (EReference)environmentEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMODE()
  {
    return modeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMODE_ModeReqID()
  {
    return (EReference)modeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMODE_PreModeConditions()
  {
    return (EReference)modeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMODE_PreRelations()
  {
    return (EReference)modeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMODE_PostModeCondition()
  {
    return (EReference)modeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTATE()
  {
    return stateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTATE_StateReqID()
  {
    return (EReference)stateEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTATE_PreStateConditions()
  {
    return (EReference)stateEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTATE_Relations()
  {
    return (EReference)stateEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTATE_PostStateCondition()
  {
    return (EReference)stateEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCONSTRAINT()
  {
    return constraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCONSTRAINT_ConstraintReqID()
  {
    return (EReference)constraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCONSTRAINT_PreConstraintConditions()
  {
    return (EReference)constraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCONSTRAINT_Relations()
  {
    return (EReference)constraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCONSTRAINT_PostConstraintCondition()
  {
    return (EReference)constraintEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPROPERTY()
  {
    return propertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PropertyReqID()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PreOperator()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PrePropertyConditions()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PreRelations()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PostOperator()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PostPropertyConditions()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPROPERTY_PostRelations()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRANG()
  {
    return rangEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRANG_CompOperator1()
  {
    return (EReference)rangEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRANG_Bound1()
  {
    return (EReference)rangEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRANG_CompOperator2()
  {
    return (EReference)rangEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRANG_Bound2()
  {
    return (EReference)rangEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRANG_Unit()
  {
    return (EReference)rangEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCTLOperator()
  {
    return ctlOperatorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAX()
  {
    return axEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAX_Ax()
  {
    return (EAttribute)axEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEG()
  {
    return egEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEG_Eg()
  {
    return (EAttribute)egEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEF()
  {
    return efEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEF_Ef()
  {
    return (EAttribute)efEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAF()
  {
    return afEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAF_Af()
  {
    return (EAttribute)afEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAG()
  {
    return agEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAG_Ag()
  {
    return (EAttribute)agEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLTLOperator()
  {
    return ltlOperatorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getF()
  {
    return fEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getF_F()
  {
    return (EAttribute)fEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getG()
  {
    return gEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getG_G()
  {
    return (EAttribute)gEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getX()
  {
    return xEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getX_X()
  {
    return (EAttribute)xEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRELATION()
  {
    return relationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRELATION_Relaion()
  {
    return (EAttribute)relationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSIGNALCONDITION()
  {
    return signalconditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSIGNALCONDITION_SignalName()
  {
    return (EAttribute)signalconditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReqID()
  {
    return reqIDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getReqID_ReqID()
  {
    return (EAttribute)reqIDEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getATTRIBUTECONTION()
  {
    return attributecontionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getATTRIBUTECONTION_AttributeName()
  {
    return (EAttribute)attributecontionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getATTRIBUTECONTION_Operator()
  {
    return (EReference)attributecontionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getATTRIBUTECONTION_AttributeValue()
  {
    return (EReference)attributecontionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getATTRIBUTECONTION_Unit()
  {
    return (EReference)attributecontionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUNIT()
  {
    return unitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getACC()
  {
    return accEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getACC_Acc()
  {
    return (EAttribute)accEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWEIGHT()
  {
    return weightEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWEIGHT_Weight()
  {
    return (EAttribute)weightEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTIME()
  {
    return timeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTIME_Time()
  {
    return (EAttribute)timeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSPEED()
  {
    return speedEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSPEED_Speed()
  {
    return (EAttribute)speedEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getATTRIBUTEVALUE()
  {
    return attributevalueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTRINGTYPE()
  {
    return stringtypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTRINGTYPE_String()
  {
    return (EAttribute)stringtypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getINTTYPE()
  {
    return inttypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getINTTYPE_Int()
  {
    return (EAttribute)inttypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBOOLEANTYPE()
  {
    return booleantypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBOOLEANTYPE_Value()
  {
    return (EAttribute)booleantypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTATECONDITON()
  {
    return stateconditonEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTATECONDITON_StateName()
  {
    return (EAttribute)stateconditonEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTATECONDITON_CompOperator()
  {
    return (EReference)stateconditonEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMODECONDITION()
  {
    return modeconditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMODECONDITION_ModeName()
  {
    return (EAttribute)modeconditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getARITHMETICCONDITION()
  {
    return arithmeticconditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getARITHMETICCONDITION_Result()
  {
    return (EAttribute)arithmeticconditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getARITHMETICCONDITION_Compcondition()
  {
    return (EReference)arithmeticconditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getARITHMETICCONDITION_Var1()
  {
    return (EAttribute)arithmeticconditionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getARITHMETICCONDITION_ArithmeticOperator()
  {
    return (EReference)arithmeticconditionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getARITHMETICCONDITION_Var2()
  {
    return (EAttribute)arithmeticconditionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getARITHMETICOPERATOR()
  {
    return arithmeticoperatorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMODULE()
  {
    return moduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMODULE_Add()
  {
    return (EAttribute)moduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDIVISION()
  {
    return divisionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDIVISION_Division()
  {
    return (EAttribute)divisionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMULTIPLICATION()
  {
    return multiplicationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMULTIPLICATION_Multiplication()
  {
    return (EAttribute)multiplicationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSUBTRACTION()
  {
    return subtractionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSUBTRACTION_Substraction()
  {
    return (EAttribute)subtractionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getADD()
  {
    return addEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getADD_Add()
  {
    return (EAttribute)addEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCOMPARISONOPERATOR()
  {
    return comparisonoperatorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNOT()
  {
    return notEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNOT_Not()
  {
    return (EAttribute)notEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGREATEQUAL()
  {
    return greatequalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGREATEQUAL_GreateEqual()
  {
    return (EAttribute)greatequalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLESSEQUAL()
  {
    return lessequalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLESSEQUAL_LessEqual()
  {
    return (EAttribute)lessequalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNOTEQUAL()
  {
    return notequalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNOTEQUAL_NotEqual()
  {
    return (EAttribute)notequalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGREATER()
  {
    return greaterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGREATER_Greater()
  {
    return (EAttribute)greaterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLESS()
  {
    return lessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLESS_Less()
  {
    return (EAttribute)lessEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEQUAL()
  {
    return equalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEQUAL_Equal()
  {
    return (EAttribute)equalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoStMLFactory getMoStMLFactory()
  {
    return (MoStMLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    moStEClass = createEClass(MO_ST);
    createEReference(moStEClass, MO_ST__MODEL);

    nlRequirementEClass = createEClass(NL_REQUIREMENT);
    createEReference(nlRequirementEClass, NL_REQUIREMENT__NL_REQ_ID);

    requirementEClass = createEClass(REQUIREMENT);

    environmentEClass = createEClass(ENVIRONMENT);
    createEReference(environmentEClass, ENVIRONMENT__ENVIR_REQ_ID);
    createEAttribute(environmentEClass, ENVIRONMENT__ENVIR_VARIABLE);
    createEReference(environmentEClass, ENVIRONMENT__ENVIR_ATTRIBUTE_VALUE);
    createEReference(environmentEClass, ENVIRONMENT__ENVIR_UNIT);
    createEReference(environmentEClass, ENVIRONMENT__RANGE);

    modeEClass = createEClass(MODE);
    createEReference(modeEClass, MODE__MODE_REQ_ID);
    createEReference(modeEClass, MODE__PRE_MODE_CONDITIONS);
    createEReference(modeEClass, MODE__PRE_RELATIONS);
    createEReference(modeEClass, MODE__POST_MODE_CONDITION);

    stateEClass = createEClass(STATE);
    createEReference(stateEClass, STATE__STATE_REQ_ID);
    createEReference(stateEClass, STATE__PRE_STATE_CONDITIONS);
    createEReference(stateEClass, STATE__RELATIONS);
    createEReference(stateEClass, STATE__POST_STATE_CONDITION);

    constraintEClass = createEClass(CONSTRAINT);
    createEReference(constraintEClass, CONSTRAINT__CONSTRAINT_REQ_ID);
    createEReference(constraintEClass, CONSTRAINT__PRE_CONSTRAINT_CONDITIONS);
    createEReference(constraintEClass, CONSTRAINT__RELATIONS);
    createEReference(constraintEClass, CONSTRAINT__POST_CONSTRAINT_CONDITION);

    propertyEClass = createEClass(PROPERTY);
    createEReference(propertyEClass, PROPERTY__PROPERTY_REQ_ID);
    createEReference(propertyEClass, PROPERTY__PRE_OPERATOR);
    createEReference(propertyEClass, PROPERTY__PRE_PROPERTY_CONDITIONS);
    createEReference(propertyEClass, PROPERTY__PRE_RELATIONS);
    createEReference(propertyEClass, PROPERTY__POST_OPERATOR);
    createEReference(propertyEClass, PROPERTY__POST_PROPERTY_CONDITIONS);
    createEReference(propertyEClass, PROPERTY__POST_RELATIONS);

    rangEClass = createEClass(RANG);
    createEReference(rangEClass, RANG__COMP_OPERATOR1);
    createEReference(rangEClass, RANG__BOUND1);
    createEReference(rangEClass, RANG__COMP_OPERATOR2);
    createEReference(rangEClass, RANG__BOUND2);
    createEReference(rangEClass, RANG__UNIT);

    ctlOperatorEClass = createEClass(CTL_OPERATOR);

    axEClass = createEClass(AX);
    createEAttribute(axEClass, AX__AX);

    egEClass = createEClass(EG);
    createEAttribute(egEClass, EG__EG);

    efEClass = createEClass(EF);
    createEAttribute(efEClass, EF__EF);

    afEClass = createEClass(AF);
    createEAttribute(afEClass, AF__AF);

    agEClass = createEClass(AG);
    createEAttribute(agEClass, AG__AG);

    ltlOperatorEClass = createEClass(LTL_OPERATOR);

    fEClass = createEClass(F);
    createEAttribute(fEClass, F__F);

    gEClass = createEClass(G);
    createEAttribute(gEClass, G__G);

    xEClass = createEClass(X);
    createEAttribute(xEClass, X__X);

    relationEClass = createEClass(RELATION);
    createEAttribute(relationEClass, RELATION__RELAION);

    signalconditionEClass = createEClass(SIGNALCONDITION);
    createEAttribute(signalconditionEClass, SIGNALCONDITION__SIGNAL_NAME);

    reqIDEClass = createEClass(REQ_ID);
    createEAttribute(reqIDEClass, REQ_ID__REQ_ID);

    attributecontionEClass = createEClass(ATTRIBUTECONTION);
    createEAttribute(attributecontionEClass, ATTRIBUTECONTION__ATTRIBUTE_NAME);
    createEReference(attributecontionEClass, ATTRIBUTECONTION__OPERATOR);
    createEReference(attributecontionEClass, ATTRIBUTECONTION__ATTRIBUTE_VALUE);
    createEReference(attributecontionEClass, ATTRIBUTECONTION__UNIT);

    unitEClass = createEClass(UNIT);

    accEClass = createEClass(ACC);
    createEAttribute(accEClass, ACC__ACC);

    weightEClass = createEClass(WEIGHT);
    createEAttribute(weightEClass, WEIGHT__WEIGHT);

    timeEClass = createEClass(TIME);
    createEAttribute(timeEClass, TIME__TIME);

    speedEClass = createEClass(SPEED);
    createEAttribute(speedEClass, SPEED__SPEED);

    attributevalueEClass = createEClass(ATTRIBUTEVALUE);

    stringtypeEClass = createEClass(STRINGTYPE);
    createEAttribute(stringtypeEClass, STRINGTYPE__STRING);

    inttypeEClass = createEClass(INTTYPE);
    createEAttribute(inttypeEClass, INTTYPE__INT);

    booleantypeEClass = createEClass(BOOLEANTYPE);
    createEAttribute(booleantypeEClass, BOOLEANTYPE__VALUE);

    stateconditonEClass = createEClass(STATECONDITON);
    createEAttribute(stateconditonEClass, STATECONDITON__STATE_NAME);
    createEReference(stateconditonEClass, STATECONDITON__COMP_OPERATOR);

    modeconditionEClass = createEClass(MODECONDITION);
    createEAttribute(modeconditionEClass, MODECONDITION__MODE_NAME);

    arithmeticconditionEClass = createEClass(ARITHMETICCONDITION);
    createEAttribute(arithmeticconditionEClass, ARITHMETICCONDITION__RESULT);
    createEReference(arithmeticconditionEClass, ARITHMETICCONDITION__COMPCONDITION);
    createEAttribute(arithmeticconditionEClass, ARITHMETICCONDITION__VAR1);
    createEReference(arithmeticconditionEClass, ARITHMETICCONDITION__ARITHMETIC_OPERATOR);
    createEAttribute(arithmeticconditionEClass, ARITHMETICCONDITION__VAR2);

    arithmeticoperatorEClass = createEClass(ARITHMETICOPERATOR);

    moduleEClass = createEClass(MODULE);
    createEAttribute(moduleEClass, MODULE__ADD);

    divisionEClass = createEClass(DIVISION);
    createEAttribute(divisionEClass, DIVISION__DIVISION);

    multiplicationEClass = createEClass(MULTIPLICATION);
    createEAttribute(multiplicationEClass, MULTIPLICATION__MULTIPLICATION);

    subtractionEClass = createEClass(SUBTRACTION);
    createEAttribute(subtractionEClass, SUBTRACTION__SUBSTRACTION);

    addEClass = createEClass(ADD);
    createEAttribute(addEClass, ADD__ADD);

    comparisonoperatorEClass = createEClass(COMPARISONOPERATOR);

    notEClass = createEClass(NOT);
    createEAttribute(notEClass, NOT__NOT);

    greatequalEClass = createEClass(GREATEQUAL);
    createEAttribute(greatequalEClass, GREATEQUAL__GREATE_EQUAL);

    lessequalEClass = createEClass(LESSEQUAL);
    createEAttribute(lessequalEClass, LESSEQUAL__LESS_EQUAL);

    notequalEClass = createEClass(NOTEQUAL);
    createEAttribute(notequalEClass, NOTEQUAL__NOT_EQUAL);

    greaterEClass = createEClass(GREATER);
    createEAttribute(greaterEClass, GREATER__GREATER);

    lessEClass = createEClass(LESS);
    createEAttribute(lessEClass, LESS__LESS);

    equalEClass = createEClass(EQUAL);
    createEAttribute(equalEClass, EQUAL__EQUAL);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    environmentEClass.getESuperTypes().add(this.getRequirement());
    modeEClass.getESuperTypes().add(this.getRequirement());
    stateEClass.getESuperTypes().add(this.getRequirement());
    constraintEClass.getESuperTypes().add(this.getRequirement());
    propertyEClass.getESuperTypes().add(this.getRequirement());
    axEClass.getESuperTypes().add(this.getCTLOperator());
    egEClass.getESuperTypes().add(this.getCTLOperator());
    efEClass.getESuperTypes().add(this.getCTLOperator());
    afEClass.getESuperTypes().add(this.getCTLOperator());
    agEClass.getESuperTypes().add(this.getCTLOperator());
    fEClass.getESuperTypes().add(this.getLTLOperator());
    gEClass.getESuperTypes().add(this.getLTLOperator());
    xEClass.getESuperTypes().add(this.getLTLOperator());
    accEClass.getESuperTypes().add(this.getUNIT());
    weightEClass.getESuperTypes().add(this.getUNIT());
    timeEClass.getESuperTypes().add(this.getUNIT());
    speedEClass.getESuperTypes().add(this.getUNIT());
    stringtypeEClass.getESuperTypes().add(this.getATTRIBUTEVALUE());
    inttypeEClass.getESuperTypes().add(this.getATTRIBUTEVALUE());
    booleantypeEClass.getESuperTypes().add(this.getATTRIBUTEVALUE());
    moduleEClass.getESuperTypes().add(this.getARITHMETICOPERATOR());
    divisionEClass.getESuperTypes().add(this.getARITHMETICOPERATOR());
    multiplicationEClass.getESuperTypes().add(this.getARITHMETICOPERATOR());
    subtractionEClass.getESuperTypes().add(this.getARITHMETICOPERATOR());
    addEClass.getESuperTypes().add(this.getARITHMETICOPERATOR());
    notEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    greatequalEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    lessequalEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    notequalEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    greaterEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    lessEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());
    equalEClass.getESuperTypes().add(this.getCOMPARISONOPERATOR());

    // Initialize classes and features; add operations and parameters
    initEClass(moStEClass, MoSt.class, "MoSt", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoSt_Model(), ecorePackage.getEObject(), null, "model", null, 0, -1, MoSt.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nlRequirementEClass, NLRequirement.class, "NLRequirement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNLRequirement_NlReqID(), this.getReqID(), null, "nlReqID", null, 0, 1, NLRequirement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(requirementEClass, Requirement.class, "Requirement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(environmentEClass, Environment.class, "Environment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnvironment_EnvirReqID(), this.getReqID(), null, "envirReqID", null, 0, 1, Environment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEnvironment_EnvirVariable(), ecorePackage.getEString(), "envirVariable", null, 0, 1, Environment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEnvironment_EnvirAttributeValue(), this.getATTRIBUTEVALUE(), null, "envirAttributeValue", null, 0, 1, Environment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEnvironment_EnvirUnit(), this.getUNIT(), null, "envirUnit", null, 0, -1, Environment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEnvironment_Range(), this.getRANG(), null, "range", null, 0, 1, Environment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modeEClass, org.xtext.example.mostml.moStML.MODE.class, "MODE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMODE_ModeReqID(), this.getReqID(), null, "modeReqID", null, 0, 1, org.xtext.example.mostml.moStML.MODE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMODE_PreModeConditions(), ecorePackage.getEObject(), null, "preModeConditions", null, 0, -1, org.xtext.example.mostml.moStML.MODE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMODE_PreRelations(), this.getRELATION(), null, "preRelations", null, 0, -1, org.xtext.example.mostml.moStML.MODE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMODE_PostModeCondition(), this.getMODECONDITION(), null, "postModeCondition", null, 0, 1, org.xtext.example.mostml.moStML.MODE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stateEClass, org.xtext.example.mostml.moStML.STATE.class, "STATE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTATE_StateReqID(), this.getReqID(), null, "stateReqID", null, 0, 1, org.xtext.example.mostml.moStML.STATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTATE_PreStateConditions(), ecorePackage.getEObject(), null, "preStateConditions", null, 0, -1, org.xtext.example.mostml.moStML.STATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTATE_Relations(), this.getRELATION(), null, "relations", null, 0, -1, org.xtext.example.mostml.moStML.STATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTATE_PostStateCondition(), this.getSTATECONDITON(), null, "postStateCondition", null, 0, 1, org.xtext.example.mostml.moStML.STATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constraintEClass, org.xtext.example.mostml.moStML.CONSTRAINT.class, "CONSTRAINT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCONSTRAINT_ConstraintReqID(), this.getReqID(), null, "constraintReqID", null, 0, 1, org.xtext.example.mostml.moStML.CONSTRAINT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCONSTRAINT_PreConstraintConditions(), ecorePackage.getEObject(), null, "preConstraintConditions", null, 0, -1, org.xtext.example.mostml.moStML.CONSTRAINT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCONSTRAINT_Relations(), this.getRELATION(), null, "relations", null, 0, -1, org.xtext.example.mostml.moStML.CONSTRAINT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCONSTRAINT_PostConstraintCondition(), ecorePackage.getEObject(), null, "postConstraintCondition", null, 0, 1, org.xtext.example.mostml.moStML.CONSTRAINT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyEClass, org.xtext.example.mostml.moStML.PROPERTY.class, "PROPERTY", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPROPERTY_PropertyReqID(), this.getReqID(), null, "propertyReqID", null, 0, 1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PreOperator(), ecorePackage.getEObject(), null, "preOperator", null, 0, 1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PrePropertyConditions(), ecorePackage.getEObject(), null, "prePropertyConditions", null, 0, -1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PreRelations(), this.getRELATION(), null, "preRelations", null, 0, -1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PostOperator(), ecorePackage.getEObject(), null, "postOperator", null, 0, 1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PostPropertyConditions(), ecorePackage.getEObject(), null, "postPropertyConditions", null, 0, -1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPROPERTY_PostRelations(), this.getRELATION(), null, "postRelations", null, 0, -1, org.xtext.example.mostml.moStML.PROPERTY.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rangEClass, org.xtext.example.mostml.moStML.RANG.class, "RANG", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRANG_CompOperator1(), this.getCOMPARISONOPERATOR(), null, "compOperator1", null, 0, 1, org.xtext.example.mostml.moStML.RANG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRANG_Bound1(), this.getATTRIBUTEVALUE(), null, "bound1", null, 0, 1, org.xtext.example.mostml.moStML.RANG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRANG_CompOperator2(), this.getCOMPARISONOPERATOR(), null, "compOperator2", null, 0, 1, org.xtext.example.mostml.moStML.RANG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRANG_Bound2(), this.getATTRIBUTEVALUE(), null, "bound2", null, 0, 1, org.xtext.example.mostml.moStML.RANG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRANG_Unit(), this.getUNIT(), null, "unit", null, 0, 1, org.xtext.example.mostml.moStML.RANG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ctlOperatorEClass, CTLOperator.class, "CTLOperator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(axEClass, org.xtext.example.mostml.moStML.AX.class, "AX", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAX_Ax(), ecorePackage.getEString(), "ax", null, 0, 1, org.xtext.example.mostml.moStML.AX.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(egEClass, org.xtext.example.mostml.moStML.EG.class, "EG", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEG_Eg(), ecorePackage.getEString(), "eg", null, 0, 1, org.xtext.example.mostml.moStML.EG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(efEClass, org.xtext.example.mostml.moStML.EF.class, "EF", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEF_Ef(), ecorePackage.getEString(), "ef", null, 0, 1, org.xtext.example.mostml.moStML.EF.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(afEClass, org.xtext.example.mostml.moStML.AF.class, "AF", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAF_Af(), ecorePackage.getEString(), "af", null, 0, 1, org.xtext.example.mostml.moStML.AF.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(agEClass, org.xtext.example.mostml.moStML.AG.class, "AG", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAG_Ag(), ecorePackage.getEString(), "ag", null, 0, 1, org.xtext.example.mostml.moStML.AG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ltlOperatorEClass, LTLOperator.class, "LTLOperator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fEClass, org.xtext.example.mostml.moStML.F.class, "F", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getF_F(), ecorePackage.getEString(), "f", null, 0, 1, org.xtext.example.mostml.moStML.F.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(gEClass, org.xtext.example.mostml.moStML.G.class, "G", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getG_G(), ecorePackage.getEString(), "g", null, 0, 1, org.xtext.example.mostml.moStML.G.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xEClass, org.xtext.example.mostml.moStML.X.class, "X", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getX_X(), ecorePackage.getEString(), "x", null, 0, 1, org.xtext.example.mostml.moStML.X.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationEClass, org.xtext.example.mostml.moStML.RELATION.class, "RELATION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRELATION_Relaion(), ecorePackage.getEString(), "relaion", null, 0, 1, org.xtext.example.mostml.moStML.RELATION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signalconditionEClass, org.xtext.example.mostml.moStML.SIGNALCONDITION.class, "SIGNALCONDITION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSIGNALCONDITION_SignalName(), ecorePackage.getEString(), "signalName", null, 0, 1, org.xtext.example.mostml.moStML.SIGNALCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(reqIDEClass, ReqID.class, "ReqID", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReqID_ReqID(), ecorePackage.getEInt(), "reqID", null, 0, -1, ReqID.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(attributecontionEClass, org.xtext.example.mostml.moStML.ATTRIBUTECONTION.class, "ATTRIBUTECONTION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getATTRIBUTECONTION_AttributeName(), ecorePackage.getEString(), "attributeName", null, 0, 1, org.xtext.example.mostml.moStML.ATTRIBUTECONTION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATTRIBUTECONTION_Operator(), this.getCOMPARISONOPERATOR(), null, "operator", null, 0, 1, org.xtext.example.mostml.moStML.ATTRIBUTECONTION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATTRIBUTECONTION_AttributeValue(), this.getATTRIBUTEVALUE(), null, "attributeValue", null, 0, 1, org.xtext.example.mostml.moStML.ATTRIBUTECONTION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATTRIBUTECONTION_Unit(), this.getUNIT(), null, "unit", null, 0, -1, org.xtext.example.mostml.moStML.ATTRIBUTECONTION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unitEClass, org.xtext.example.mostml.moStML.UNIT.class, "UNIT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(accEClass, org.xtext.example.mostml.moStML.ACC.class, "ACC", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getACC_Acc(), ecorePackage.getEString(), "acc", null, 0, 1, org.xtext.example.mostml.moStML.ACC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(weightEClass, org.xtext.example.mostml.moStML.WEIGHT.class, "WEIGHT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWEIGHT_Weight(), ecorePackage.getEString(), "weight", null, 0, 1, org.xtext.example.mostml.moStML.WEIGHT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(timeEClass, org.xtext.example.mostml.moStML.TIME.class, "TIME", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTIME_Time(), ecorePackage.getEString(), "time", null, 0, 1, org.xtext.example.mostml.moStML.TIME.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(speedEClass, org.xtext.example.mostml.moStML.SPEED.class, "SPEED", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSPEED_Speed(), ecorePackage.getEString(), "speed", null, 0, 1, org.xtext.example.mostml.moStML.SPEED.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(attributevalueEClass, org.xtext.example.mostml.moStML.ATTRIBUTEVALUE.class, "ATTRIBUTEVALUE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stringtypeEClass, org.xtext.example.mostml.moStML.STRINGTYPE.class, "STRINGTYPE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSTRINGTYPE_String(), ecorePackage.getEString(), "string", null, 0, 1, org.xtext.example.mostml.moStML.STRINGTYPE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inttypeEClass, org.xtext.example.mostml.moStML.INTTYPE.class, "INTTYPE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getINTTYPE_Int(), ecorePackage.getEInt(), "int", null, 0, 1, org.xtext.example.mostml.moStML.INTTYPE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleantypeEClass, org.xtext.example.mostml.moStML.BOOLEANTYPE.class, "BOOLEANTYPE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBOOLEANTYPE_Value(), ecorePackage.getEString(), "value", null, 0, 1, org.xtext.example.mostml.moStML.BOOLEANTYPE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stateconditonEClass, org.xtext.example.mostml.moStML.STATECONDITON.class, "STATECONDITON", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSTATECONDITON_StateName(), ecorePackage.getEString(), "stateName", null, 0, 1, org.xtext.example.mostml.moStML.STATECONDITON.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTATECONDITON_CompOperator(), this.getCOMPARISONOPERATOR(), null, "compOperator", null, 0, 1, org.xtext.example.mostml.moStML.STATECONDITON.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modeconditionEClass, org.xtext.example.mostml.moStML.MODECONDITION.class, "MODECONDITION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMODECONDITION_ModeName(), ecorePackage.getEString(), "modeName", null, 0, 1, org.xtext.example.mostml.moStML.MODECONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticconditionEClass, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, "ARITHMETICCONDITION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getARITHMETICCONDITION_Result(), ecorePackage.getEString(), "result", null, 0, 1, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getARITHMETICCONDITION_Compcondition(), this.getCOMPARISONOPERATOR(), null, "compcondition", null, 0, 1, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getARITHMETICCONDITION_Var1(), ecorePackage.getEString(), "var1", null, 0, 1, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getARITHMETICCONDITION_ArithmeticOperator(), this.getARITHMETICOPERATOR(), null, "arithmeticOperator", null, 0, 1, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getARITHMETICCONDITION_Var2(), ecorePackage.getEString(), "var2", null, 0, 1, org.xtext.example.mostml.moStML.ARITHMETICCONDITION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticoperatorEClass, org.xtext.example.mostml.moStML.ARITHMETICOPERATOR.class, "ARITHMETICOPERATOR", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moduleEClass, org.xtext.example.mostml.moStML.MODULE.class, "MODULE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMODULE_Add(), ecorePackage.getEString(), "add", null, 0, 1, org.xtext.example.mostml.moStML.MODULE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(divisionEClass, org.xtext.example.mostml.moStML.DIVISION.class, "DIVISION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDIVISION_Division(), ecorePackage.getEString(), "division", null, 0, 1, org.xtext.example.mostml.moStML.DIVISION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiplicationEClass, org.xtext.example.mostml.moStML.MULTIPLICATION.class, "MULTIPLICATION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMULTIPLICATION_Multiplication(), ecorePackage.getEString(), "multiplication", null, 0, 1, org.xtext.example.mostml.moStML.MULTIPLICATION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subtractionEClass, org.xtext.example.mostml.moStML.SUBTRACTION.class, "SUBTRACTION", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSUBTRACTION_Substraction(), ecorePackage.getEString(), "substraction", null, 0, 1, org.xtext.example.mostml.moStML.SUBTRACTION.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(addEClass, org.xtext.example.mostml.moStML.ADD.class, "ADD", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getADD_Add(), ecorePackage.getEString(), "add", null, 0, 1, org.xtext.example.mostml.moStML.ADD.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(comparisonoperatorEClass, org.xtext.example.mostml.moStML.COMPARISONOPERATOR.class, "COMPARISONOPERATOR", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(notEClass, org.xtext.example.mostml.moStML.NOT.class, "NOT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNOT_Not(), ecorePackage.getEString(), "not", null, 0, 1, org.xtext.example.mostml.moStML.NOT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(greatequalEClass, org.xtext.example.mostml.moStML.GREATEQUAL.class, "GREATEQUAL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGREATEQUAL_GreateEqual(), ecorePackage.getEString(), "greateEqual", null, 0, -1, org.xtext.example.mostml.moStML.GREATEQUAL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lessequalEClass, org.xtext.example.mostml.moStML.LESSEQUAL.class, "LESSEQUAL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLESSEQUAL_LessEqual(), ecorePackage.getEString(), "lessEqual", null, 0, 1, org.xtext.example.mostml.moStML.LESSEQUAL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notequalEClass, org.xtext.example.mostml.moStML.NOTEQUAL.class, "NOTEQUAL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNOTEQUAL_NotEqual(), ecorePackage.getEString(), "notEqual", null, 0, 1, org.xtext.example.mostml.moStML.NOTEQUAL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(greaterEClass, org.xtext.example.mostml.moStML.GREATER.class, "GREATER", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGREATER_Greater(), ecorePackage.getEString(), "greater", null, 0, 1, org.xtext.example.mostml.moStML.GREATER.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lessEClass, org.xtext.example.mostml.moStML.LESS.class, "LESS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLESS_Less(), ecorePackage.getEString(), "less", null, 0, -1, org.xtext.example.mostml.moStML.LESS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(equalEClass, org.xtext.example.mostml.moStML.EQUAL.class, "EQUAL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEQUAL_Equal(), ecorePackage.getEString(), "equal", null, 0, 1, org.xtext.example.mostml.moStML.EQUAL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //MoStMLPackageImpl
