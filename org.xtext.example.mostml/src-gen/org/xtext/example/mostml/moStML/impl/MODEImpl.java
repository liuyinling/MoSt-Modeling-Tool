/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mostml.moStML.MODE;
import org.xtext.example.mostml.moStML.MODECONDITION;
import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.RELATION;
import org.xtext.example.mostml.moStML.ReqID;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MODE</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.MODEImpl#getModeReqID <em>Mode Req ID</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.MODEImpl#getPreModeConditions <em>Pre Mode Conditions</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.MODEImpl#getPreRelations <em>Pre Relations</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.MODEImpl#getPostModeCondition <em>Post Mode Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MODEImpl extends RequirementImpl implements MODE
{
  /**
   * The cached value of the '{@link #getModeReqID() <em>Mode Req ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModeReqID()
   * @generated
   * @ordered
   */
  protected ReqID modeReqID;

  /**
   * The cached value of the '{@link #getPreModeConditions() <em>Pre Mode Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreModeConditions()
   * @generated
   * @ordered
   */
  protected EList<EObject> preModeConditions;

  /**
   * The cached value of the '{@link #getPreRelations() <em>Pre Relations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreRelations()
   * @generated
   * @ordered
   */
  protected EList<RELATION> preRelations;

  /**
   * The cached value of the '{@link #getPostModeCondition() <em>Post Mode Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostModeCondition()
   * @generated
   * @ordered
   */
  protected MODECONDITION postModeCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MODEImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.MODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID getModeReqID()
  {
    return modeReqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModeReqID(ReqID newModeReqID, NotificationChain msgs)
  {
    ReqID oldModeReqID = modeReqID;
    modeReqID = newModeReqID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.MODE__MODE_REQ_ID, oldModeReqID, newModeReqID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModeReqID(ReqID newModeReqID)
  {
    if (newModeReqID != modeReqID)
    {
      NotificationChain msgs = null;
      if (modeReqID != null)
        msgs = ((InternalEObject)modeReqID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.MODE__MODE_REQ_ID, null, msgs);
      if (newModeReqID != null)
        msgs = ((InternalEObject)newModeReqID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.MODE__MODE_REQ_ID, null, msgs);
      msgs = basicSetModeReqID(newModeReqID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.MODE__MODE_REQ_ID, newModeReqID, newModeReqID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPreModeConditions()
  {
    if (preModeConditions == null)
    {
      preModeConditions = new EObjectContainmentEList<EObject>(EObject.class, this, MoStMLPackage.MODE__PRE_MODE_CONDITIONS);
    }
    return preModeConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RELATION> getPreRelations()
  {
    if (preRelations == null)
    {
      preRelations = new EObjectContainmentEList<RELATION>(RELATION.class, this, MoStMLPackage.MODE__PRE_RELATIONS);
    }
    return preRelations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MODECONDITION getPostModeCondition()
  {
    return postModeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostModeCondition(MODECONDITION newPostModeCondition, NotificationChain msgs)
  {
    MODECONDITION oldPostModeCondition = postModeCondition;
    postModeCondition = newPostModeCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.MODE__POST_MODE_CONDITION, oldPostModeCondition, newPostModeCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostModeCondition(MODECONDITION newPostModeCondition)
  {
    if (newPostModeCondition != postModeCondition)
    {
      NotificationChain msgs = null;
      if (postModeCondition != null)
        msgs = ((InternalEObject)postModeCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.MODE__POST_MODE_CONDITION, null, msgs);
      if (newPostModeCondition != null)
        msgs = ((InternalEObject)newPostModeCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.MODE__POST_MODE_CONDITION, null, msgs);
      msgs = basicSetPostModeCondition(newPostModeCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.MODE__POST_MODE_CONDITION, newPostModeCondition, newPostModeCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.MODE__MODE_REQ_ID:
        return basicSetModeReqID(null, msgs);
      case MoStMLPackage.MODE__PRE_MODE_CONDITIONS:
        return ((InternalEList<?>)getPreModeConditions()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.MODE__PRE_RELATIONS:
        return ((InternalEList<?>)getPreRelations()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.MODE__POST_MODE_CONDITION:
        return basicSetPostModeCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.MODE__MODE_REQ_ID:
        return getModeReqID();
      case MoStMLPackage.MODE__PRE_MODE_CONDITIONS:
        return getPreModeConditions();
      case MoStMLPackage.MODE__PRE_RELATIONS:
        return getPreRelations();
      case MoStMLPackage.MODE__POST_MODE_CONDITION:
        return getPostModeCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.MODE__MODE_REQ_ID:
        setModeReqID((ReqID)newValue);
        return;
      case MoStMLPackage.MODE__PRE_MODE_CONDITIONS:
        getPreModeConditions().clear();
        getPreModeConditions().addAll((Collection<? extends EObject>)newValue);
        return;
      case MoStMLPackage.MODE__PRE_RELATIONS:
        getPreRelations().clear();
        getPreRelations().addAll((Collection<? extends RELATION>)newValue);
        return;
      case MoStMLPackage.MODE__POST_MODE_CONDITION:
        setPostModeCondition((MODECONDITION)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.MODE__MODE_REQ_ID:
        setModeReqID((ReqID)null);
        return;
      case MoStMLPackage.MODE__PRE_MODE_CONDITIONS:
        getPreModeConditions().clear();
        return;
      case MoStMLPackage.MODE__PRE_RELATIONS:
        getPreRelations().clear();
        return;
      case MoStMLPackage.MODE__POST_MODE_CONDITION:
        setPostModeCondition((MODECONDITION)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.MODE__MODE_REQ_ID:
        return modeReqID != null;
      case MoStMLPackage.MODE__PRE_MODE_CONDITIONS:
        return preModeConditions != null && !preModeConditions.isEmpty();
      case MoStMLPackage.MODE__PRE_RELATIONS:
        return preRelations != null && !preRelations.isEmpty();
      case MoStMLPackage.MODE__POST_MODE_CONDITION:
        return postModeCondition != null;
    }
    return super.eIsSet(featureID);
  }

} //MODEImpl
