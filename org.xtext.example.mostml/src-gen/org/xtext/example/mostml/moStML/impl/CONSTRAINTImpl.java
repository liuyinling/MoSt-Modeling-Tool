/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mostml.moStML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mostml.moStML.CONSTRAINT;
import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.RELATION;
import org.xtext.example.mostml.moStML.ReqID;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CONSTRAINT</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.CONSTRAINTImpl#getConstraintReqID <em>Constraint Req ID</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.CONSTRAINTImpl#getPreConstraintConditions <em>Pre Constraint Conditions</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.CONSTRAINTImpl#getRelations <em>Relations</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.CONSTRAINTImpl#getPostConstraintCondition <em>Post Constraint Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CONSTRAINTImpl extends RequirementImpl implements CONSTRAINT
{
  /**
   * The cached value of the '{@link #getConstraintReqID() <em>Constraint Req ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintReqID()
   * @generated
   * @ordered
   */
  protected ReqID constraintReqID;

  /**
   * The cached value of the '{@link #getPreConstraintConditions() <em>Pre Constraint Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreConstraintConditions()
   * @generated
   * @ordered
   */
  protected EList<EObject> preConstraintConditions;

  /**
   * The cached value of the '{@link #getRelations() <em>Relations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelations()
   * @generated
   * @ordered
   */
  protected EList<RELATION> relations;

  /**
   * The cached value of the '{@link #getPostConstraintCondition() <em>Post Constraint Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostConstraintCondition()
   * @generated
   * @ordered
   */
  protected EObject postConstraintCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CONSTRAINTImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID getConstraintReqID()
  {
    return constraintReqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraintReqID(ReqID newConstraintReqID, NotificationChain msgs)
  {
    ReqID oldConstraintReqID = constraintReqID;
    constraintReqID = newConstraintReqID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID, oldConstraintReqID, newConstraintReqID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraintReqID(ReqID newConstraintReqID)
  {
    if (newConstraintReqID != constraintReqID)
    {
      NotificationChain msgs = null;
      if (constraintReqID != null)
        msgs = ((InternalEObject)constraintReqID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID, null, msgs);
      if (newConstraintReqID != null)
        msgs = ((InternalEObject)newConstraintReqID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID, null, msgs);
      msgs = basicSetConstraintReqID(newConstraintReqID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID, newConstraintReqID, newConstraintReqID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPreConstraintConditions()
  {
    if (preConstraintConditions == null)
    {
      preConstraintConditions = new EObjectContainmentEList<EObject>(EObject.class, this, MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS);
    }
    return preConstraintConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RELATION> getRelations()
  {
    if (relations == null)
    {
      relations = new EObjectContainmentEList<RELATION>(RELATION.class, this, MoStMLPackage.CONSTRAINT__RELATIONS);
    }
    return relations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getPostConstraintCondition()
  {
    return postConstraintCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostConstraintCondition(EObject newPostConstraintCondition, NotificationChain msgs)
  {
    EObject oldPostConstraintCondition = postConstraintCondition;
    postConstraintCondition = newPostConstraintCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION, oldPostConstraintCondition, newPostConstraintCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostConstraintCondition(EObject newPostConstraintCondition)
  {
    if (newPostConstraintCondition != postConstraintCondition)
    {
      NotificationChain msgs = null;
      if (postConstraintCondition != null)
        msgs = ((InternalEObject)postConstraintCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION, null, msgs);
      if (newPostConstraintCondition != null)
        msgs = ((InternalEObject)newPostConstraintCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION, null, msgs);
      msgs = basicSetPostConstraintCondition(newPostConstraintCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION, newPostConstraintCondition, newPostConstraintCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID:
        return basicSetConstraintReqID(null, msgs);
      case MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS:
        return ((InternalEList<?>)getPreConstraintConditions()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.CONSTRAINT__RELATIONS:
        return ((InternalEList<?>)getRelations()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION:
        return basicSetPostConstraintCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID:
        return getConstraintReqID();
      case MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS:
        return getPreConstraintConditions();
      case MoStMLPackage.CONSTRAINT__RELATIONS:
        return getRelations();
      case MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION:
        return getPostConstraintCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID:
        setConstraintReqID((ReqID)newValue);
        return;
      case MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS:
        getPreConstraintConditions().clear();
        getPreConstraintConditions().addAll((Collection<? extends EObject>)newValue);
        return;
      case MoStMLPackage.CONSTRAINT__RELATIONS:
        getRelations().clear();
        getRelations().addAll((Collection<? extends RELATION>)newValue);
        return;
      case MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION:
        setPostConstraintCondition((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID:
        setConstraintReqID((ReqID)null);
        return;
      case MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS:
        getPreConstraintConditions().clear();
        return;
      case MoStMLPackage.CONSTRAINT__RELATIONS:
        getRelations().clear();
        return;
      case MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION:
        setPostConstraintCondition((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.CONSTRAINT__CONSTRAINT_REQ_ID:
        return constraintReqID != null;
      case MoStMLPackage.CONSTRAINT__PRE_CONSTRAINT_CONDITIONS:
        return preConstraintConditions != null && !preConstraintConditions.isEmpty();
      case MoStMLPackage.CONSTRAINT__RELATIONS:
        return relations != null && !relations.isEmpty();
      case MoStMLPackage.CONSTRAINT__POST_CONSTRAINT_CONDITION:
        return postConstraintCondition != null;
    }
    return super.eIsSet(featureID);
  }

} //CONSTRAINTImpl
