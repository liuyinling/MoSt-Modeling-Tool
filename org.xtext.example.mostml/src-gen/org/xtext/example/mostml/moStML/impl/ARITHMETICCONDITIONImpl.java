/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mostml.moStML.ARITHMETICCONDITION;
import org.xtext.example.mostml.moStML.ARITHMETICOPERATOR;
import org.xtext.example.mostml.moStML.COMPARISONOPERATOR;
import org.xtext.example.mostml.moStML.MoStMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ARITHMETICCONDITION</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.ARITHMETICCONDITIONImpl#getResult <em>Result</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.ARITHMETICCONDITIONImpl#getCompcondition <em>Compcondition</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.ARITHMETICCONDITIONImpl#getVar1 <em>Var1</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.ARITHMETICCONDITIONImpl#getArithmeticOperator <em>Arithmetic Operator</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.ARITHMETICCONDITIONImpl#getVar2 <em>Var2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ARITHMETICCONDITIONImpl extends MinimalEObjectImpl.Container implements ARITHMETICCONDITION
{
  /**
   * The default value of the '{@link #getResult() <em>Result</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected static final String RESULT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected String result = RESULT_EDEFAULT;

  /**
   * The cached value of the '{@link #getCompcondition() <em>Compcondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompcondition()
   * @generated
   * @ordered
   */
  protected COMPARISONOPERATOR compcondition;

  /**
   * The default value of the '{@link #getVar1() <em>Var1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar1()
   * @generated
   * @ordered
   */
  protected static final String VAR1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar1() <em>Var1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar1()
   * @generated
   * @ordered
   */
  protected String var1 = VAR1_EDEFAULT;

  /**
   * The cached value of the '{@link #getArithmeticOperator() <em>Arithmetic Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticOperator()
   * @generated
   * @ordered
   */
  protected ARITHMETICOPERATOR arithmeticOperator;

  /**
   * The default value of the '{@link #getVar2() <em>Var2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar2()
   * @generated
   * @ordered
   */
  protected static final String VAR2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar2() <em>Var2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar2()
   * @generated
   * @ordered
   */
  protected String var2 = VAR2_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ARITHMETICCONDITIONImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.ARITHMETICCONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResult(String newResult)
  {
    String oldResult = result;
    result = newResult;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__RESULT, oldResult, result));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COMPARISONOPERATOR getCompcondition()
  {
    return compcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompcondition(COMPARISONOPERATOR newCompcondition, NotificationChain msgs)
  {
    COMPARISONOPERATOR oldCompcondition = compcondition;
    compcondition = newCompcondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION, oldCompcondition, newCompcondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompcondition(COMPARISONOPERATOR newCompcondition)
  {
    if (newCompcondition != compcondition)
    {
      NotificationChain msgs = null;
      if (compcondition != null)
        msgs = ((InternalEObject)compcondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION, null, msgs);
      if (newCompcondition != null)
        msgs = ((InternalEObject)newCompcondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION, null, msgs);
      msgs = basicSetCompcondition(newCompcondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION, newCompcondition, newCompcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVar1()
  {
    return var1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar1(String newVar1)
  {
    String oldVar1 = var1;
    var1 = newVar1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__VAR1, oldVar1, var1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ARITHMETICOPERATOR getArithmeticOperator()
  {
    return arithmeticOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithmeticOperator(ARITHMETICOPERATOR newArithmeticOperator, NotificationChain msgs)
  {
    ARITHMETICOPERATOR oldArithmeticOperator = arithmeticOperator;
    arithmeticOperator = newArithmeticOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR, oldArithmeticOperator, newArithmeticOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithmeticOperator(ARITHMETICOPERATOR newArithmeticOperator)
  {
    if (newArithmeticOperator != arithmeticOperator)
    {
      NotificationChain msgs = null;
      if (arithmeticOperator != null)
        msgs = ((InternalEObject)arithmeticOperator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR, null, msgs);
      if (newArithmeticOperator != null)
        msgs = ((InternalEObject)newArithmeticOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR, null, msgs);
      msgs = basicSetArithmeticOperator(newArithmeticOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR, newArithmeticOperator, newArithmeticOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVar2()
  {
    return var2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar2(String newVar2)
  {
    String oldVar2 = var2;
    var2 = newVar2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.ARITHMETICCONDITION__VAR2, oldVar2, var2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION:
        return basicSetCompcondition(null, msgs);
      case MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR:
        return basicSetArithmeticOperator(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.ARITHMETICCONDITION__RESULT:
        return getResult();
      case MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION:
        return getCompcondition();
      case MoStMLPackage.ARITHMETICCONDITION__VAR1:
        return getVar1();
      case MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR:
        return getArithmeticOperator();
      case MoStMLPackage.ARITHMETICCONDITION__VAR2:
        return getVar2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.ARITHMETICCONDITION__RESULT:
        setResult((String)newValue);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION:
        setCompcondition((COMPARISONOPERATOR)newValue);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__VAR1:
        setVar1((String)newValue);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR:
        setArithmeticOperator((ARITHMETICOPERATOR)newValue);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__VAR2:
        setVar2((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.ARITHMETICCONDITION__RESULT:
        setResult(RESULT_EDEFAULT);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION:
        setCompcondition((COMPARISONOPERATOR)null);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__VAR1:
        setVar1(VAR1_EDEFAULT);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR:
        setArithmeticOperator((ARITHMETICOPERATOR)null);
        return;
      case MoStMLPackage.ARITHMETICCONDITION__VAR2:
        setVar2(VAR2_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.ARITHMETICCONDITION__RESULT:
        return RESULT_EDEFAULT == null ? result != null : !RESULT_EDEFAULT.equals(result);
      case MoStMLPackage.ARITHMETICCONDITION__COMPCONDITION:
        return compcondition != null;
      case MoStMLPackage.ARITHMETICCONDITION__VAR1:
        return VAR1_EDEFAULT == null ? var1 != null : !VAR1_EDEFAULT.equals(var1);
      case MoStMLPackage.ARITHMETICCONDITION__ARITHMETIC_OPERATOR:
        return arithmeticOperator != null;
      case MoStMLPackage.ARITHMETICCONDITION__VAR2:
        return VAR2_EDEFAULT == null ? var2 != null : !VAR2_EDEFAULT.equals(var2);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (result: ");
    result.append(result);
    result.append(", var1: ");
    result.append(var1);
    result.append(", var2: ");
    result.append(var2);
    result.append(')');
    return result.toString();
  }

} //ARITHMETICCONDITIONImpl
