/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mostml.moStML.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MoStMLFactoryImpl extends EFactoryImpl implements MoStMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MoStMLFactory init()
  {
    try
    {
      MoStMLFactory theMoStMLFactory = (MoStMLFactory)EPackage.Registry.INSTANCE.getEFactory(MoStMLPackage.eNS_URI);
      if (theMoStMLFactory != null)
      {
        return theMoStMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MoStMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoStMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MoStMLPackage.MO_ST: return createMoSt();
      case MoStMLPackage.NL_REQUIREMENT: return createNLRequirement();
      case MoStMLPackage.REQUIREMENT: return createRequirement();
      case MoStMLPackage.ENVIRONMENT: return createEnvironment();
      case MoStMLPackage.MODE: return createMODE();
      case MoStMLPackage.STATE: return createSTATE();
      case MoStMLPackage.CONSTRAINT: return createCONSTRAINT();
      case MoStMLPackage.PROPERTY: return createPROPERTY();
      case MoStMLPackage.RANG: return createRANG();
      case MoStMLPackage.CTL_OPERATOR: return createCTLOperator();
      case MoStMLPackage.AX: return createAX();
      case MoStMLPackage.EG: return createEG();
      case MoStMLPackage.EF: return createEF();
      case MoStMLPackage.AF: return createAF();
      case MoStMLPackage.AG: return createAG();
      case MoStMLPackage.LTL_OPERATOR: return createLTLOperator();
      case MoStMLPackage.F: return createF();
      case MoStMLPackage.G: return createG();
      case MoStMLPackage.X: return createX();
      case MoStMLPackage.RELATION: return createRELATION();
      case MoStMLPackage.SIGNALCONDITION: return createSIGNALCONDITION();
      case MoStMLPackage.REQ_ID: return createReqID();
      case MoStMLPackage.ATTRIBUTECONTION: return createATTRIBUTECONTION();
      case MoStMLPackage.UNIT: return createUNIT();
      case MoStMLPackage.WEIGHT: return createWEIGHT();
      case MoStMLPackage.TIME: return createTIME();
      case MoStMLPackage.SPEED: return createSPEED();
      case MoStMLPackage.ATTRIBUTEVALUE: return createATTRIBUTEVALUE();
      case MoStMLPackage.STRINGTYPE: return createSTRINGTYPE();
      case MoStMLPackage.INTTYPE: return createINTTYPE();
      case MoStMLPackage.BOOLEANTYPE: return createBOOLEANTYPE();
      case MoStMLPackage.STATECONDITON: return createSTATECONDITON();
      case MoStMLPackage.MODECONDITION: return createMODECONDITION();
      case MoStMLPackage.ARITHMETICCONDITION: return createARITHMETICCONDITION();
      case MoStMLPackage.ARITHMETICOPERATOR: return createARITHMETICOPERATOR();
      case MoStMLPackage.MODULE: return createMODULE();
      case MoStMLPackage.DIVISION: return createDIVISION();
      case MoStMLPackage.MULTIPLICATION: return createMULTIPLICATION();
      case MoStMLPackage.SUBTRACTION: return createSUBTRACTION();
      case MoStMLPackage.ADD: return createADD();
      case MoStMLPackage.COMPARISONOPERATOR: return createCOMPARISONOPERATOR();
      case MoStMLPackage.NOT: return createNOT();
      case MoStMLPackage.GREATEQUAL: return createGREATEQUAL();
      case MoStMLPackage.LESSEQUAL: return createLESSEQUAL();
      case MoStMLPackage.NOTEQUAL: return createNOTEQUAL();
      case MoStMLPackage.GREATER: return createGREATER();
      case MoStMLPackage.LESS: return createLESS();
      case MoStMLPackage.EQUAL: return createEQUAL();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoSt createMoSt()
  {
    MoStImpl moSt = new MoStImpl();
    return moSt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NLRequirement createNLRequirement()
  {
    NLRequirementImpl nlRequirement = new NLRequirementImpl();
    return nlRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MODE createMODE()
  {
    MODEImpl mode = new MODEImpl();
    return mode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STATE createSTATE()
  {
    STATEImpl state = new STATEImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONSTRAINT createCONSTRAINT()
  {
    CONSTRAINTImpl constraint = new CONSTRAINTImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PROPERTY createPROPERTY()
  {
    PROPERTYImpl property = new PROPERTYImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RANG createRANG()
  {
    RANGImpl rang = new RANGImpl();
    return rang;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CTLOperator createCTLOperator()
  {
    CTLOperatorImpl ctlOperator = new CTLOperatorImpl();
    return ctlOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AX createAX()
  {
    AXImpl ax = new AXImpl();
    return ax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EG createEG()
  {
    EGImpl eg = new EGImpl();
    return eg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EF createEF()
  {
    EFImpl ef = new EFImpl();
    return ef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AF createAF()
  {
    AFImpl af = new AFImpl();
    return af;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AG createAG()
  {
    AGImpl ag = new AGImpl();
    return ag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLOperator createLTLOperator()
  {
    LTLOperatorImpl ltlOperator = new LTLOperatorImpl();
    return ltlOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public F createF()
  {
    FImpl f = new FImpl();
    return f;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public G createG()
  {
    GImpl g = new GImpl();
    return g;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public X createX()
  {
    XImpl x = new XImpl();
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RELATION createRELATION()
  {
    RELATIONImpl relation = new RELATIONImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SIGNALCONDITION createSIGNALCONDITION()
  {
    SIGNALCONDITIONImpl signalcondition = new SIGNALCONDITIONImpl();
    return signalcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID createReqID()
  {
    ReqIDImpl reqID = new ReqIDImpl();
    return reqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ATTRIBUTECONTION createATTRIBUTECONTION()
  {
    ATTRIBUTECONTIONImpl attributecontion = new ATTRIBUTECONTIONImpl();
    return attributecontion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UNIT createUNIT()
  {
    UNITImpl unit = new UNITImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WEIGHT createWEIGHT()
  {
    WEIGHTImpl weight = new WEIGHTImpl();
    return weight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TIME createTIME()
  {
    TIMEImpl time = new TIMEImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SPEED createSPEED()
  {
    SPEEDImpl speed = new SPEEDImpl();
    return speed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ATTRIBUTEVALUE createATTRIBUTEVALUE()
  {
    ATTRIBUTEVALUEImpl attributevalue = new ATTRIBUTEVALUEImpl();
    return attributevalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STRINGTYPE createSTRINGTYPE()
  {
    STRINGTYPEImpl stringtype = new STRINGTYPEImpl();
    return stringtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public INTTYPE createINTTYPE()
  {
    INTTYPEImpl inttype = new INTTYPEImpl();
    return inttype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOLEANTYPE createBOOLEANTYPE()
  {
    BOOLEANTYPEImpl booleantype = new BOOLEANTYPEImpl();
    return booleantype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STATECONDITON createSTATECONDITON()
  {
    STATECONDITONImpl stateconditon = new STATECONDITONImpl();
    return stateconditon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MODECONDITION createMODECONDITION()
  {
    MODECONDITIONImpl modecondition = new MODECONDITIONImpl();
    return modecondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ARITHMETICCONDITION createARITHMETICCONDITION()
  {
    ARITHMETICCONDITIONImpl arithmeticcondition = new ARITHMETICCONDITIONImpl();
    return arithmeticcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ARITHMETICOPERATOR createARITHMETICOPERATOR()
  {
    ARITHMETICOPERATORImpl arithmeticoperator = new ARITHMETICOPERATORImpl();
    return arithmeticoperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MODULE createMODULE()
  {
    MODULEImpl module = new MODULEImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DIVISION createDIVISION()
  {
    DIVISIONImpl division = new DIVISIONImpl();
    return division;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MULTIPLICATION createMULTIPLICATION()
  {
    MULTIPLICATIONImpl multiplication = new MULTIPLICATIONImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUBTRACTION createSUBTRACTION()
  {
    SUBTRACTIONImpl subtraction = new SUBTRACTIONImpl();
    return subtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ADD createADD()
  {
    ADDImpl add = new ADDImpl();
    return add;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COMPARISONOPERATOR createCOMPARISONOPERATOR()
  {
    COMPARISONOPERATORImpl comparisonoperator = new COMPARISONOPERATORImpl();
    return comparisonoperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NOT createNOT()
  {
    NOTImpl not = new NOTImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GREATEQUAL createGREATEQUAL()
  {
    GREATEQUALImpl greatequal = new GREATEQUALImpl();
    return greatequal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LESSEQUAL createLESSEQUAL()
  {
    LESSEQUALImpl lessequal = new LESSEQUALImpl();
    return lessequal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NOTEQUAL createNOTEQUAL()
  {
    NOTEQUALImpl notequal = new NOTEQUALImpl();
    return notequal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GREATER createGREATER()
  {
    GREATERImpl greater = new GREATERImpl();
    return greater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LESS createLESS()
  {
    LESSImpl less = new LESSImpl();
    return less;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EQUAL createEQUAL()
  {
    EQUALImpl equal = new EQUALImpl();
    return equal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoStMLPackage getMoStMLPackage()
  {
    return (MoStMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MoStMLPackage getPackage()
  {
    return MoStMLPackage.eINSTANCE;
  }

} //MoStMLFactoryImpl
