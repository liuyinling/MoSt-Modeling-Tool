/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.NLRequirement;
import org.xtext.example.mostml.moStML.ReqID;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>NL Requirement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.NLRequirementImpl#getNlReqID <em>Nl Req ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NLRequirementImpl extends MinimalEObjectImpl.Container implements NLRequirement
{
  /**
   * The cached value of the '{@link #getNlReqID() <em>Nl Req ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNlReqID()
   * @generated
   * @ordered
   */
  protected ReqID nlReqID;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NLRequirementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.NL_REQUIREMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID getNlReqID()
  {
    return nlReqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNlReqID(ReqID newNlReqID, NotificationChain msgs)
  {
    ReqID oldNlReqID = nlReqID;
    nlReqID = newNlReqID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID, oldNlReqID, newNlReqID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNlReqID(ReqID newNlReqID)
  {
    if (newNlReqID != nlReqID)
    {
      NotificationChain msgs = null;
      if (nlReqID != null)
        msgs = ((InternalEObject)nlReqID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID, null, msgs);
      if (newNlReqID != null)
        msgs = ((InternalEObject)newNlReqID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID, null, msgs);
      msgs = basicSetNlReqID(newNlReqID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID, newNlReqID, newNlReqID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID:
        return basicSetNlReqID(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID:
        return getNlReqID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID:
        setNlReqID((ReqID)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID:
        setNlReqID((ReqID)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.NL_REQUIREMENT__NL_REQ_ID:
        return nlReqID != null;
    }
    return super.eIsSet(featureID);
  }

} //NLRequirementImpl
