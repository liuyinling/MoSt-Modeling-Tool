/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.RELATION;
import org.xtext.example.mostml.moStML.ReqID;
import org.xtext.example.mostml.moStML.STATE;
import org.xtext.example.mostml.moStML.STATECONDITON;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>STATE</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.STATEImpl#getStateReqID <em>State Req ID</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.STATEImpl#getPreStateConditions <em>Pre State Conditions</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.STATEImpl#getRelations <em>Relations</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.STATEImpl#getPostStateCondition <em>Post State Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class STATEImpl extends RequirementImpl implements STATE
{
  /**
   * The cached value of the '{@link #getStateReqID() <em>State Req ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateReqID()
   * @generated
   * @ordered
   */
  protected ReqID stateReqID;

  /**
   * The cached value of the '{@link #getPreStateConditions() <em>Pre State Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreStateConditions()
   * @generated
   * @ordered
   */
  protected EList<EObject> preStateConditions;

  /**
   * The cached value of the '{@link #getRelations() <em>Relations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelations()
   * @generated
   * @ordered
   */
  protected EList<RELATION> relations;

  /**
   * The cached value of the '{@link #getPostStateCondition() <em>Post State Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostStateCondition()
   * @generated
   * @ordered
   */
  protected STATECONDITON postStateCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STATEImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID getStateReqID()
  {
    return stateReqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateReqID(ReqID newStateReqID, NotificationChain msgs)
  {
    ReqID oldStateReqID = stateReqID;
    stateReqID = newStateReqID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.STATE__STATE_REQ_ID, oldStateReqID, newStateReqID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStateReqID(ReqID newStateReqID)
  {
    if (newStateReqID != stateReqID)
    {
      NotificationChain msgs = null;
      if (stateReqID != null)
        msgs = ((InternalEObject)stateReqID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.STATE__STATE_REQ_ID, null, msgs);
      if (newStateReqID != null)
        msgs = ((InternalEObject)newStateReqID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.STATE__STATE_REQ_ID, null, msgs);
      msgs = basicSetStateReqID(newStateReqID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.STATE__STATE_REQ_ID, newStateReqID, newStateReqID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPreStateConditions()
  {
    if (preStateConditions == null)
    {
      preStateConditions = new EObjectContainmentEList<EObject>(EObject.class, this, MoStMLPackage.STATE__PRE_STATE_CONDITIONS);
    }
    return preStateConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RELATION> getRelations()
  {
    if (relations == null)
    {
      relations = new EObjectContainmentEList<RELATION>(RELATION.class, this, MoStMLPackage.STATE__RELATIONS);
    }
    return relations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STATECONDITON getPostStateCondition()
  {
    return postStateCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostStateCondition(STATECONDITON newPostStateCondition, NotificationChain msgs)
  {
    STATECONDITON oldPostStateCondition = postStateCondition;
    postStateCondition = newPostStateCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.STATE__POST_STATE_CONDITION, oldPostStateCondition, newPostStateCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostStateCondition(STATECONDITON newPostStateCondition)
  {
    if (newPostStateCondition != postStateCondition)
    {
      NotificationChain msgs = null;
      if (postStateCondition != null)
        msgs = ((InternalEObject)postStateCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.STATE__POST_STATE_CONDITION, null, msgs);
      if (newPostStateCondition != null)
        msgs = ((InternalEObject)newPostStateCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.STATE__POST_STATE_CONDITION, null, msgs);
      msgs = basicSetPostStateCondition(newPostStateCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.STATE__POST_STATE_CONDITION, newPostStateCondition, newPostStateCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.STATE__STATE_REQ_ID:
        return basicSetStateReqID(null, msgs);
      case MoStMLPackage.STATE__PRE_STATE_CONDITIONS:
        return ((InternalEList<?>)getPreStateConditions()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.STATE__RELATIONS:
        return ((InternalEList<?>)getRelations()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.STATE__POST_STATE_CONDITION:
        return basicSetPostStateCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.STATE__STATE_REQ_ID:
        return getStateReqID();
      case MoStMLPackage.STATE__PRE_STATE_CONDITIONS:
        return getPreStateConditions();
      case MoStMLPackage.STATE__RELATIONS:
        return getRelations();
      case MoStMLPackage.STATE__POST_STATE_CONDITION:
        return getPostStateCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.STATE__STATE_REQ_ID:
        setStateReqID((ReqID)newValue);
        return;
      case MoStMLPackage.STATE__PRE_STATE_CONDITIONS:
        getPreStateConditions().clear();
        getPreStateConditions().addAll((Collection<? extends EObject>)newValue);
        return;
      case MoStMLPackage.STATE__RELATIONS:
        getRelations().clear();
        getRelations().addAll((Collection<? extends RELATION>)newValue);
        return;
      case MoStMLPackage.STATE__POST_STATE_CONDITION:
        setPostStateCondition((STATECONDITON)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.STATE__STATE_REQ_ID:
        setStateReqID((ReqID)null);
        return;
      case MoStMLPackage.STATE__PRE_STATE_CONDITIONS:
        getPreStateConditions().clear();
        return;
      case MoStMLPackage.STATE__RELATIONS:
        getRelations().clear();
        return;
      case MoStMLPackage.STATE__POST_STATE_CONDITION:
        setPostStateCondition((STATECONDITON)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.STATE__STATE_REQ_ID:
        return stateReqID != null;
      case MoStMLPackage.STATE__PRE_STATE_CONDITIONS:
        return preStateConditions != null && !preStateConditions.isEmpty();
      case MoStMLPackage.STATE__RELATIONS:
        return relations != null && !relations.isEmpty();
      case MoStMLPackage.STATE__POST_STATE_CONDITION:
        return postStateCondition != null;
    }
    return super.eIsSet(featureID);
  }

} //STATEImpl
