/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.moStML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mostml.moStML.MoStMLPackage;
import org.xtext.example.mostml.moStML.PROPERTY;
import org.xtext.example.mostml.moStML.RELATION;
import org.xtext.example.mostml.moStML.ReqID;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>PROPERTY</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPropertyReqID <em>Property Req ID</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPreOperator <em>Pre Operator</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPrePropertyConditions <em>Pre Property Conditions</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPreRelations <em>Pre Relations</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPostOperator <em>Post Operator</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPostPropertyConditions <em>Post Property Conditions</em>}</li>
 *   <li>{@link org.xtext.example.mostml.moStML.impl.PROPERTYImpl#getPostRelations <em>Post Relations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PROPERTYImpl extends RequirementImpl implements PROPERTY
{
  /**
   * The cached value of the '{@link #getPropertyReqID() <em>Property Req ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyReqID()
   * @generated
   * @ordered
   */
  protected ReqID propertyReqID;

  /**
   * The cached value of the '{@link #getPreOperator() <em>Pre Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreOperator()
   * @generated
   * @ordered
   */
  protected EObject preOperator;

  /**
   * The cached value of the '{@link #getPrePropertyConditions() <em>Pre Property Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrePropertyConditions()
   * @generated
   * @ordered
   */
  protected EList<EObject> prePropertyConditions;

  /**
   * The cached value of the '{@link #getPreRelations() <em>Pre Relations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreRelations()
   * @generated
   * @ordered
   */
  protected EList<RELATION> preRelations;

  /**
   * The cached value of the '{@link #getPostOperator() <em>Post Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostOperator()
   * @generated
   * @ordered
   */
  protected EObject postOperator;

  /**
   * The cached value of the '{@link #getPostPropertyConditions() <em>Post Property Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostPropertyConditions()
   * @generated
   * @ordered
   */
  protected EList<EObject> postPropertyConditions;

  /**
   * The cached value of the '{@link #getPostRelations() <em>Post Relations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostRelations()
   * @generated
   * @ordered
   */
  protected EList<RELATION> postRelations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PROPERTYImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoStMLPackage.Literals.PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqID getPropertyReqID()
  {
    return propertyReqID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropertyReqID(ReqID newPropertyReqID, NotificationChain msgs)
  {
    ReqID oldPropertyReqID = propertyReqID;
    propertyReqID = newPropertyReqID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__PROPERTY_REQ_ID, oldPropertyReqID, newPropertyReqID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertyReqID(ReqID newPropertyReqID)
  {
    if (newPropertyReqID != propertyReqID)
    {
      NotificationChain msgs = null;
      if (propertyReqID != null)
        msgs = ((InternalEObject)propertyReqID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__PROPERTY_REQ_ID, null, msgs);
      if (newPropertyReqID != null)
        msgs = ((InternalEObject)newPropertyReqID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__PROPERTY_REQ_ID, null, msgs);
      msgs = basicSetPropertyReqID(newPropertyReqID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__PROPERTY_REQ_ID, newPropertyReqID, newPropertyReqID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getPreOperator()
  {
    return preOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPreOperator(EObject newPreOperator, NotificationChain msgs)
  {
    EObject oldPreOperator = preOperator;
    preOperator = newPreOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__PRE_OPERATOR, oldPreOperator, newPreOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPreOperator(EObject newPreOperator)
  {
    if (newPreOperator != preOperator)
    {
      NotificationChain msgs = null;
      if (preOperator != null)
        msgs = ((InternalEObject)preOperator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__PRE_OPERATOR, null, msgs);
      if (newPreOperator != null)
        msgs = ((InternalEObject)newPreOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__PRE_OPERATOR, null, msgs);
      msgs = basicSetPreOperator(newPreOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__PRE_OPERATOR, newPreOperator, newPreOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPrePropertyConditions()
  {
    if (prePropertyConditions == null)
    {
      prePropertyConditions = new EObjectContainmentEList<EObject>(EObject.class, this, MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS);
    }
    return prePropertyConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RELATION> getPreRelations()
  {
    if (preRelations == null)
    {
      preRelations = new EObjectContainmentEList<RELATION>(RELATION.class, this, MoStMLPackage.PROPERTY__PRE_RELATIONS);
    }
    return preRelations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getPostOperator()
  {
    return postOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostOperator(EObject newPostOperator, NotificationChain msgs)
  {
    EObject oldPostOperator = postOperator;
    postOperator = newPostOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__POST_OPERATOR, oldPostOperator, newPostOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostOperator(EObject newPostOperator)
  {
    if (newPostOperator != postOperator)
    {
      NotificationChain msgs = null;
      if (postOperator != null)
        msgs = ((InternalEObject)postOperator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__POST_OPERATOR, null, msgs);
      if (newPostOperator != null)
        msgs = ((InternalEObject)newPostOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoStMLPackage.PROPERTY__POST_OPERATOR, null, msgs);
      msgs = basicSetPostOperator(newPostOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoStMLPackage.PROPERTY__POST_OPERATOR, newPostOperator, newPostOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPostPropertyConditions()
  {
    if (postPropertyConditions == null)
    {
      postPropertyConditions = new EObjectContainmentEList<EObject>(EObject.class, this, MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS);
    }
    return postPropertyConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RELATION> getPostRelations()
  {
    if (postRelations == null)
    {
      postRelations = new EObjectContainmentEList<RELATION>(RELATION.class, this, MoStMLPackage.PROPERTY__POST_RELATIONS);
    }
    return postRelations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoStMLPackage.PROPERTY__PROPERTY_REQ_ID:
        return basicSetPropertyReqID(null, msgs);
      case MoStMLPackage.PROPERTY__PRE_OPERATOR:
        return basicSetPreOperator(null, msgs);
      case MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS:
        return ((InternalEList<?>)getPrePropertyConditions()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.PROPERTY__PRE_RELATIONS:
        return ((InternalEList<?>)getPreRelations()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.PROPERTY__POST_OPERATOR:
        return basicSetPostOperator(null, msgs);
      case MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS:
        return ((InternalEList<?>)getPostPropertyConditions()).basicRemove(otherEnd, msgs);
      case MoStMLPackage.PROPERTY__POST_RELATIONS:
        return ((InternalEList<?>)getPostRelations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoStMLPackage.PROPERTY__PROPERTY_REQ_ID:
        return getPropertyReqID();
      case MoStMLPackage.PROPERTY__PRE_OPERATOR:
        return getPreOperator();
      case MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS:
        return getPrePropertyConditions();
      case MoStMLPackage.PROPERTY__PRE_RELATIONS:
        return getPreRelations();
      case MoStMLPackage.PROPERTY__POST_OPERATOR:
        return getPostOperator();
      case MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS:
        return getPostPropertyConditions();
      case MoStMLPackage.PROPERTY__POST_RELATIONS:
        return getPostRelations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoStMLPackage.PROPERTY__PROPERTY_REQ_ID:
        setPropertyReqID((ReqID)newValue);
        return;
      case MoStMLPackage.PROPERTY__PRE_OPERATOR:
        setPreOperator((EObject)newValue);
        return;
      case MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS:
        getPrePropertyConditions().clear();
        getPrePropertyConditions().addAll((Collection<? extends EObject>)newValue);
        return;
      case MoStMLPackage.PROPERTY__PRE_RELATIONS:
        getPreRelations().clear();
        getPreRelations().addAll((Collection<? extends RELATION>)newValue);
        return;
      case MoStMLPackage.PROPERTY__POST_OPERATOR:
        setPostOperator((EObject)newValue);
        return;
      case MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS:
        getPostPropertyConditions().clear();
        getPostPropertyConditions().addAll((Collection<? extends EObject>)newValue);
        return;
      case MoStMLPackage.PROPERTY__POST_RELATIONS:
        getPostRelations().clear();
        getPostRelations().addAll((Collection<? extends RELATION>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.PROPERTY__PROPERTY_REQ_ID:
        setPropertyReqID((ReqID)null);
        return;
      case MoStMLPackage.PROPERTY__PRE_OPERATOR:
        setPreOperator((EObject)null);
        return;
      case MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS:
        getPrePropertyConditions().clear();
        return;
      case MoStMLPackage.PROPERTY__PRE_RELATIONS:
        getPreRelations().clear();
        return;
      case MoStMLPackage.PROPERTY__POST_OPERATOR:
        setPostOperator((EObject)null);
        return;
      case MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS:
        getPostPropertyConditions().clear();
        return;
      case MoStMLPackage.PROPERTY__POST_RELATIONS:
        getPostRelations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoStMLPackage.PROPERTY__PROPERTY_REQ_ID:
        return propertyReqID != null;
      case MoStMLPackage.PROPERTY__PRE_OPERATOR:
        return preOperator != null;
      case MoStMLPackage.PROPERTY__PRE_PROPERTY_CONDITIONS:
        return prePropertyConditions != null && !prePropertyConditions.isEmpty();
      case MoStMLPackage.PROPERTY__PRE_RELATIONS:
        return preRelations != null && !preRelations.isEmpty();
      case MoStMLPackage.PROPERTY__POST_OPERATOR:
        return postOperator != null;
      case MoStMLPackage.PROPERTY__POST_PROPERTY_CONDITIONS:
        return postPropertyConditions != null && !postPropertyConditions.isEmpty();
      case MoStMLPackage.PROPERTY__POST_RELATIONS:
        return postRelations != null && !postRelations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PROPERTYImpl
