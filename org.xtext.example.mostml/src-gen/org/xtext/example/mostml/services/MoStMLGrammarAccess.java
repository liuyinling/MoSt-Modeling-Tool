/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mostml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MoStMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MoStElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.MoSt");
		private final Assignment cModelAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cModelAlternatives_0 = (Alternatives)cModelAssignment.eContents().get(0);
		private final RuleCall cModelRequirementParserRuleCall_0_0 = (RuleCall)cModelAlternatives_0.eContents().get(0);
		private final RuleCall cModelNLRequirementParserRuleCall_0_1 = (RuleCall)cModelAlternatives_0.eContents().get(1);
		
		//MoSt:
		//    model+=(Requirement | NLRequirement )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//model+=(Requirement | NLRequirement )*
		public Assignment getModelAssignment() { return cModelAssignment; }
		
		//(Requirement | NLRequirement )
		public Alternatives getModelAlternatives_0() { return cModelAlternatives_0; }
		
		//Requirement
		public RuleCall getModelRequirementParserRuleCall_0_0() { return cModelRequirementParserRuleCall_0_0; }
		
		//NLRequirement
		public RuleCall getModelNLRequirementParserRuleCall_0_1() { return cModelNLRequirementParserRuleCall_0_1; }
	}
	public class NLRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.NLRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNlReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNlReqIDReqIDParserRuleCall_0_0 = (RuleCall)cNlReqIDAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NLRequirement:
		//    nlReqID=ReqID ID (ID)* '.';
		@Override public ParserRule getRule() { return rule; }
		
		//nlReqID=ReqID ID (ID)* '.'
		public Group getGroup() { return cGroup; }
		
		//nlReqID=ReqID
		public Assignment getNlReqIDAssignment_0() { return cNlReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getNlReqIDReqIDParserRuleCall_0_0() { return cNlReqIDReqIDParserRuleCall_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.Requirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMODEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPROPERTYParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCONSTRAINTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnvironmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Requirement:
		//    MODE | STATE | PROPERTY |  CONSTRAINT | Environment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MODE | STATE | PROPERTY |  CONSTRAINT | Environment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MODE
		public RuleCall getMODEParserRuleCall_0() { return cMODEParserRuleCall_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_1() { return cSTATEParserRuleCall_1; }
		
		//PROPERTY
		public RuleCall getPROPERTYParserRuleCall_2() { return cPROPERTYParserRuleCall_2; }
		
		//CONSTRAINT
		public RuleCall getCONSTRAINTParserRuleCall_3() { return cCONSTRAINTParserRuleCall_3; }
		
		//Environment
		public RuleCall getEnvironmentParserRuleCall_4() { return cEnvironmentParserRuleCall_4; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvirReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnvirReqIDReqIDParserRuleCall_0_0 = (RuleCall)cEnvirReqIDAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cEnvirVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnvirVariableIDTerminalRuleCall_2_0 = (RuleCall)cEnvirVariableAssignment_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cInitialisedKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cToKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cEnvirAttributeValueAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cEnvirAttributeValueATTRIBUTEVALUEParserRuleCall_4_0_2_0 = (RuleCall)cEnvirAttributeValueAssignment_4_0_2.eContents().get(0);
		private final Assignment cEnvirUnitAssignment_4_0_3 = (Assignment)cGroup_4_0.eContents().get(3);
		private final RuleCall cEnvirUnitUNITParserRuleCall_4_0_3_0 = (RuleCall)cEnvirUnitAssignment_4_0_3.eContents().get(0);
		private final Assignment cRangeAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cRangeRANGParserRuleCall_4_1_0 = (RuleCall)cRangeAssignment_4_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Environment:
		//    envirReqID=ReqID ID envirVariable=ID (ID)*  (('initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
		//    (envirUnit+=UNIT)*) | (range=RANG)) (ID)*'.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//envirReqID=ReqID ID envirVariable=ID (ID)*  (('initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
		//(envirUnit+=UNIT)*) | (range=RANG)) (ID)*'.'
		public Group getGroup() { return cGroup; }
		
		//envirReqID=ReqID
		public Assignment getEnvirReqIDAssignment_0() { return cEnvirReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getEnvirReqIDReqIDParserRuleCall_0_0() { return cEnvirReqIDReqIDParserRuleCall_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//envirVariable=ID
		public Assignment getEnvirVariableAssignment_2() { return cEnvirVariableAssignment_2; }
		
		//ID
		public RuleCall getEnvirVariableIDTerminalRuleCall_2_0() { return cEnvirVariableIDTerminalRuleCall_2_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//(('initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
		//  (envirUnit+=UNIT)*) | (range=RANG))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
		//    (envirUnit+=UNIT)*)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'initialised'
		public Keyword getInitialisedKeyword_4_0_0() { return cInitialisedKeyword_4_0_0; }
		
		//'to'
		public Keyword getToKeyword_4_0_1() { return cToKeyword_4_0_1; }
		
		//envirAttributeValue=ATTRIBUTEVALUE
		public Assignment getEnvirAttributeValueAssignment_4_0_2() { return cEnvirAttributeValueAssignment_4_0_2; }
		
		//ATTRIBUTEVALUE
		public RuleCall getEnvirAttributeValueATTRIBUTEVALUEParserRuleCall_4_0_2_0() { return cEnvirAttributeValueATTRIBUTEVALUEParserRuleCall_4_0_2_0; }
		
		//(envirUnit+=UNIT)*
		public Assignment getEnvirUnitAssignment_4_0_3() { return cEnvirUnitAssignment_4_0_3; }
		
		//UNIT
		public RuleCall getEnvirUnitUNITParserRuleCall_4_0_3_0() { return cEnvirUnitUNITParserRuleCall_4_0_3_0; }
		
		//(range=RANG)
		public Assignment getRangeAssignment_4_1() { return cRangeAssignment_4_1; }
		
		//RANG
		public RuleCall getRangeRANGParserRuleCall_4_1_0() { return cRangeRANGParserRuleCall_4_1_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class MODEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.MODE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModeReqIDReqIDParserRuleCall_0_0 = (RuleCall)cModeReqIDAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreModeConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreModeConditionsMODECONDITIONParserRuleCall_2_0 = (RuleCall)cPreModeConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPreRelationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPreRelationsRELATIONParserRuleCall_3_0_0 = (RuleCall)cPreRelationsAssignment_3_0.eContents().get(0);
		private final Assignment cPreModeConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cPreModeConditionsAlternatives_3_1_0 = (Alternatives)cPreModeConditionsAssignment_3_1.eContents().get(0);
		private final RuleCall cPreModeConditionsSTATECONDITONParserRuleCall_3_1_0_0 = (RuleCall)cPreModeConditionsAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cPreModeConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1 = (RuleCall)cPreModeConditionsAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cPreModeConditionsMODECONDITIONParserRuleCall_3_1_0_2 = (RuleCall)cPreModeConditionsAlternatives_3_1_0.eContents().get(2);
		private final RuleCall cPreModeConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3 = (RuleCall)cPreModeConditionsAlternatives_3_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPostModeConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPostModeConditionMODECONDITIONParserRuleCall_6_0 = (RuleCall)cPostModeConditionAssignment_6.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MODE:
		//    modeReqID=ReqID 'when' preModeConditions+=MODECONDITION (preRelations+=RELATION preModeConditions+=(STATECONDITON
		//    | ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))*  ',' 'then' postModeCondition = MODECONDITION '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//modeReqID=ReqID 'when' preModeConditions+=MODECONDITION (preRelations+=RELATION preModeConditions+=(STATECONDITON
		//| ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))*  ',' 'then' postModeCondition = MODECONDITION '.'
		public Group getGroup() { return cGroup; }
		
		//modeReqID=ReqID
		public Assignment getModeReqIDAssignment_0() { return cModeReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getModeReqIDReqIDParserRuleCall_0_0() { return cModeReqIDReqIDParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//preModeConditions+=MODECONDITION
		public Assignment getPreModeConditionsAssignment_2() { return cPreModeConditionsAssignment_2; }
		
		//MODECONDITION
		public RuleCall getPreModeConditionsMODECONDITIONParserRuleCall_2_0() { return cPreModeConditionsMODECONDITIONParserRuleCall_2_0; }
		
		//(preRelations+=RELATION preModeConditions+=(STATECONDITON
		//   | ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))*
		public Group getGroup_3() { return cGroup_3; }
		
		//preRelations+=RELATION
		public Assignment getPreRelationsAssignment_3_0() { return cPreRelationsAssignment_3_0; }
		
		//RELATION
		public RuleCall getPreRelationsRELATIONParserRuleCall_3_0_0() { return cPreRelationsRELATIONParserRuleCall_3_0_0; }
		
		//preModeConditions+=(STATECONDITON
		//   | ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION)
		public Assignment getPreModeConditionsAssignment_3_1() { return cPreModeConditionsAssignment_3_1; }
		
		//(STATECONDITON
		//    | ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION)
		public Alternatives getPreModeConditionsAlternatives_3_1_0() { return cPreModeConditionsAlternatives_3_1_0; }
		
		//STATECONDITON
		public RuleCall getPreModeConditionsSTATECONDITONParserRuleCall_3_1_0_0() { return cPreModeConditionsSTATECONDITONParserRuleCall_3_1_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPreModeConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1() { return cPreModeConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1; }
		
		//MODECONDITION
		public RuleCall getPreModeConditionsMODECONDITIONParserRuleCall_3_1_0_2() { return cPreModeConditionsMODECONDITIONParserRuleCall_3_1_0_2; }
		
		//SIGNALCONDITION
		public RuleCall getPreModeConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3() { return cPreModeConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//postModeCondition = MODECONDITION
		public Assignment getPostModeConditionAssignment_6() { return cPostModeConditionAssignment_6; }
		
		//MODECONDITION
		public RuleCall getPostModeConditionMODECONDITIONParserRuleCall_6_0() { return cPostModeConditionMODECONDITIONParserRuleCall_6_0; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}
	public class STATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.STATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateReqIDReqIDParserRuleCall_0_0 = (RuleCall)cStateReqIDAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreStateConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreStateConditionsSTATECONDITONParserRuleCall_2_0 = (RuleCall)cPreStateConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRelationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRelationsRELATIONParserRuleCall_3_0_0 = (RuleCall)cRelationsAssignment_3_0.eContents().get(0);
		private final Assignment cPreStateConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cPreStateConditionsAlternatives_3_1_0 = (Alternatives)cPreStateConditionsAssignment_3_1.eContents().get(0);
		private final RuleCall cPreStateConditionsSTATECONDITONParserRuleCall_3_1_0_0 = (RuleCall)cPreStateConditionsAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cPreStateConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1 = (RuleCall)cPreStateConditionsAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cPreStateConditionsMODECONDITIONParserRuleCall_3_1_0_2 = (RuleCall)cPreStateConditionsAlternatives_3_1_0.eContents().get(2);
		private final RuleCall cPreStateConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3 = (RuleCall)cPreStateConditionsAlternatives_3_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPostStateConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPostStateConditionSTATECONDITONParserRuleCall_6_0 = (RuleCall)cPostStateConditionAssignment_6.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//STATE:
		//    stateReqID=ReqID 'when' preStateConditions+=STATECONDITON (relations+=RELATION preStateConditions+=(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))* ',' 'then' postStateCondition=STATECONDITON '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stateReqID=ReqID 'when' preStateConditions+=STATECONDITON (relations+=RELATION preStateConditions+=(STATECONDITON |
		//ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))* ',' 'then' postStateCondition=STATECONDITON '.'
		public Group getGroup() { return cGroup; }
		
		//stateReqID=ReqID
		public Assignment getStateReqIDAssignment_0() { return cStateReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getStateReqIDReqIDParserRuleCall_0_0() { return cStateReqIDReqIDParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//preStateConditions+=STATECONDITON
		public Assignment getPreStateConditionsAssignment_2() { return cPreStateConditionsAssignment_2; }
		
		//STATECONDITON
		public RuleCall getPreStateConditionsSTATECONDITONParserRuleCall_2_0() { return cPreStateConditionsSTATECONDITONParserRuleCall_2_0; }
		
		//(relations+=RELATION preStateConditions+=(STATECONDITON |
		//   ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))*
		public Group getGroup_3() { return cGroup_3; }
		
		//relations+=RELATION
		public Assignment getRelationsAssignment_3_0() { return cRelationsAssignment_3_0; }
		
		//RELATION
		public RuleCall getRelationsRELATIONParserRuleCall_3_0_0() { return cRelationsRELATIONParserRuleCall_3_0_0; }
		
		//preStateConditions+=(STATECONDITON |
		//   ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION)
		public Assignment getPreStateConditionsAssignment_3_1() { return cPreStateConditionsAssignment_3_1; }
		
		//(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION)
		public Alternatives getPreStateConditionsAlternatives_3_1_0() { return cPreStateConditionsAlternatives_3_1_0; }
		
		//STATECONDITON
		public RuleCall getPreStateConditionsSTATECONDITONParserRuleCall_3_1_0_0() { return cPreStateConditionsSTATECONDITONParserRuleCall_3_1_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPreStateConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1() { return cPreStateConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1; }
		
		//MODECONDITION
		public RuleCall getPreStateConditionsMODECONDITIONParserRuleCall_3_1_0_2() { return cPreStateConditionsMODECONDITIONParserRuleCall_3_1_0_2; }
		
		//SIGNALCONDITION
		public RuleCall getPreStateConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3() { return cPreStateConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//postStateCondition=STATECONDITON
		public Assignment getPostStateConditionAssignment_6() { return cPostStateConditionAssignment_6; }
		
		//STATECONDITON
		public RuleCall getPostStateConditionSTATECONDITONParserRuleCall_6_0() { return cPostStateConditionSTATECONDITONParserRuleCall_6_0; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}
	public class CONSTRAINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.CONSTRAINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstraintReqIDReqIDParserRuleCall_0_0 = (RuleCall)cConstraintReqIDAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreConstraintConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPreConstraintConditionsAlternatives_2_0 = (Alternatives)cPreConstraintConditionsAssignment_2.eContents().get(0);
		private final RuleCall cPreConstraintConditionsSTATECONDITONParserRuleCall_2_0_0 = (RuleCall)cPreConstraintConditionsAlternatives_2_0.eContents().get(0);
		private final RuleCall cPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_2_0_1 = (RuleCall)cPreConstraintConditionsAlternatives_2_0.eContents().get(1);
		private final RuleCall cPreConstraintConditionsMODECONDITIONParserRuleCall_2_0_2 = (RuleCall)cPreConstraintConditionsAlternatives_2_0.eContents().get(2);
		private final RuleCall cPreConstraintConditionsSIGNALCONDITIONParserRuleCall_2_0_3 = (RuleCall)cPreConstraintConditionsAlternatives_2_0.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRelationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRelationsRELATIONParserRuleCall_3_0_0 = (RuleCall)cRelationsAssignment_3_0.eContents().get(0);
		private final Assignment cPreConstraintConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cPreConstraintConditionsAlternatives_3_1_0 = (Alternatives)cPreConstraintConditionsAssignment_3_1.eContents().get(0);
		private final RuleCall cPreConstraintConditionsSTATECONDITONParserRuleCall_3_1_0_0 = (RuleCall)cPreConstraintConditionsAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1 = (RuleCall)cPreConstraintConditionsAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cPreConstraintConditionsMODECONDITIONParserRuleCall_3_1_0_2 = (RuleCall)cPreConstraintConditionsAlternatives_3_1_0.eContents().get(2);
		private final RuleCall cPreConstraintConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3 = (RuleCall)cPreConstraintConditionsAlternatives_3_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPostConstraintConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cPostConstraintConditionAlternatives_6_0 = (Alternatives)cPostConstraintConditionAssignment_6.eContents().get(0);
		private final RuleCall cPostConstraintConditionSTATECONDITONParserRuleCall_6_0_0 = (RuleCall)cPostConstraintConditionAlternatives_6_0.eContents().get(0);
		private final RuleCall cPostConstraintConditionATTRIBUTECONTIONParserRuleCall_6_0_1 = (RuleCall)cPostConstraintConditionAlternatives_6_0.eContents().get(1);
		private final RuleCall cPostConstraintConditionMODECONDITIONParserRuleCall_6_0_2 = (RuleCall)cPostConstraintConditionAlternatives_6_0.eContents().get(2);
		private final RuleCall cPostConstraintConditionARITHMETICCONDITIONParserRuleCall_6_0_3 = (RuleCall)cPostConstraintConditionAlternatives_6_0.eContents().get(3);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CONSTRAINT:
		//    constraintReqID=ReqID 'when' preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION |
		//    SIGNALCONDITION)*  (relations+=RELATION preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
		//    | SIGNALCONDITION))* ',' 'then' postConstraintCondition=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION | ARITHMETICCONDITION)'.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//constraintReqID=ReqID 'when' preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION |
		//SIGNALCONDITION)*  (relations+=RELATION preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
		//| SIGNALCONDITION))* ',' 'then' postConstraintCondition=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION | ARITHMETICCONDITION)'.'
		public Group getGroup() { return cGroup; }
		
		//constraintReqID=ReqID
		public Assignment getConstraintReqIDAssignment_0() { return cConstraintReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getConstraintReqIDReqIDParserRuleCall_0_0() { return cConstraintReqIDReqIDParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION |
		//   SIGNALCONDITION)*
		public Assignment getPreConstraintConditionsAssignment_2() { return cPreConstraintConditionsAssignment_2; }
		
		//(STATECONDITON | ATTRIBUTECONTION | MODECONDITION |
		//    SIGNALCONDITION)
		public Alternatives getPreConstraintConditionsAlternatives_2_0() { return cPreConstraintConditionsAlternatives_2_0; }
		
		//STATECONDITON
		public RuleCall getPreConstraintConditionsSTATECONDITONParserRuleCall_2_0_0() { return cPreConstraintConditionsSTATECONDITONParserRuleCall_2_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_2_0_1() { return cPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_2_0_1; }
		
		//MODECONDITION
		public RuleCall getPreConstraintConditionsMODECONDITIONParserRuleCall_2_0_2() { return cPreConstraintConditionsMODECONDITIONParserRuleCall_2_0_2; }
		
		//SIGNALCONDITION
		public RuleCall getPreConstraintConditionsSIGNALCONDITIONParserRuleCall_2_0_3() { return cPreConstraintConditionsSIGNALCONDITIONParserRuleCall_2_0_3; }
		
		//(relations+=RELATION preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
		//  | SIGNALCONDITION))*
		public Group getGroup_3() { return cGroup_3; }
		
		//relations+=RELATION
		public Assignment getRelationsAssignment_3_0() { return cRelationsAssignment_3_0; }
		
		//RELATION
		public RuleCall getRelationsRELATIONParserRuleCall_3_0_0() { return cRelationsRELATIONParserRuleCall_3_0_0; }
		
		//preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
		//   | SIGNALCONDITION)
		public Assignment getPreConstraintConditionsAssignment_3_1() { return cPreConstraintConditionsAssignment_3_1; }
		
		//(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
		//    | SIGNALCONDITION)
		public Alternatives getPreConstraintConditionsAlternatives_3_1_0() { return cPreConstraintConditionsAlternatives_3_1_0; }
		
		//STATECONDITON
		public RuleCall getPreConstraintConditionsSTATECONDITONParserRuleCall_3_1_0_0() { return cPreConstraintConditionsSTATECONDITONParserRuleCall_3_1_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1() { return cPreConstraintConditionsATTRIBUTECONTIONParserRuleCall_3_1_0_1; }
		
		//MODECONDITION
		public RuleCall getPreConstraintConditionsMODECONDITIONParserRuleCall_3_1_0_2() { return cPreConstraintConditionsMODECONDITIONParserRuleCall_3_1_0_2; }
		
		//SIGNALCONDITION
		public RuleCall getPreConstraintConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3() { return cPreConstraintConditionsSIGNALCONDITIONParserRuleCall_3_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//postConstraintCondition=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION | ARITHMETICCONDITION)
		public Assignment getPostConstraintConditionAssignment_6() { return cPostConstraintConditionAssignment_6; }
		
		//(STATECONDITON | ATTRIBUTECONTION | MODECONDITION | ARITHMETICCONDITION)
		public Alternatives getPostConstraintConditionAlternatives_6_0() { return cPostConstraintConditionAlternatives_6_0; }
		
		//STATECONDITON
		public RuleCall getPostConstraintConditionSTATECONDITONParserRuleCall_6_0_0() { return cPostConstraintConditionSTATECONDITONParserRuleCall_6_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPostConstraintConditionATTRIBUTECONTIONParserRuleCall_6_0_1() { return cPostConstraintConditionATTRIBUTECONTIONParserRuleCall_6_0_1; }
		
		//MODECONDITION
		public RuleCall getPostConstraintConditionMODECONDITIONParserRuleCall_6_0_2() { return cPostConstraintConditionMODECONDITIONParserRuleCall_6_0_2; }
		
		//ARITHMETICCONDITION
		public RuleCall getPostConstraintConditionARITHMETICCONDITIONParserRuleCall_6_0_3() { return cPostConstraintConditionARITHMETICCONDITIONParserRuleCall_6_0_3; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}
	public class PROPERTYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.PROPERTY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyReqIDReqIDParserRuleCall_0_0 = (RuleCall)cPropertyReqIDAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPreOperatorAlternatives_2_0 = (Alternatives)cPreOperatorAssignment_2.eContents().get(0);
		private final RuleCall cPreOperatorCTLOperatorParserRuleCall_2_0_0 = (RuleCall)cPreOperatorAlternatives_2_0.eContents().get(0);
		private final RuleCall cPreOperatorLTLOperatorParserRuleCall_2_0_1 = (RuleCall)cPreOperatorAlternatives_2_0.eContents().get(1);
		private final Assignment cPrePropertyConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cPrePropertyConditionsAlternatives_3_0 = (Alternatives)cPrePropertyConditionsAssignment_3.eContents().get(0);
		private final RuleCall cPrePropertyConditionsSTATECONDITONParserRuleCall_3_0_0 = (RuleCall)cPrePropertyConditionsAlternatives_3_0.eContents().get(0);
		private final RuleCall cPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_3_0_1 = (RuleCall)cPrePropertyConditionsAlternatives_3_0.eContents().get(1);
		private final RuleCall cPrePropertyConditionsMODECONDITIONParserRuleCall_3_0_2 = (RuleCall)cPrePropertyConditionsAlternatives_3_0.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPreRelationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPreRelationsRELATIONParserRuleCall_4_0_0 = (RuleCall)cPreRelationsAssignment_4_0.eContents().get(0);
		private final Assignment cPrePropertyConditionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cPrePropertyConditionsAlternatives_4_1_0 = (Alternatives)cPrePropertyConditionsAssignment_4_1.eContents().get(0);
		private final RuleCall cPrePropertyConditionsSTATECONDITONParserRuleCall_4_1_0_0 = (RuleCall)cPrePropertyConditionsAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_4_1_0_1 = (RuleCall)cPrePropertyConditionsAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cPrePropertyConditionsMODECONDITIONParserRuleCall_4_1_0_2 = (RuleCall)cPrePropertyConditionsAlternatives_4_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPostOperatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cPostOperatorAlternatives_7_0 = (Alternatives)cPostOperatorAssignment_7.eContents().get(0);
		private final RuleCall cPostOperatorCTLOperatorParserRuleCall_7_0_0 = (RuleCall)cPostOperatorAlternatives_7_0.eContents().get(0);
		private final RuleCall cPostOperatorLTLOperatorParserRuleCall_7_0_1 = (RuleCall)cPostOperatorAlternatives_7_0.eContents().get(1);
		private final Assignment cPostPropertyConditionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cPostPropertyConditionsAlternatives_8_0 = (Alternatives)cPostPropertyConditionsAssignment_8.eContents().get(0);
		private final RuleCall cPostPropertyConditionsSTATECONDITONParserRuleCall_8_0_0 = (RuleCall)cPostPropertyConditionsAlternatives_8_0.eContents().get(0);
		private final RuleCall cPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_8_0_1 = (RuleCall)cPostPropertyConditionsAlternatives_8_0.eContents().get(1);
		private final RuleCall cPostPropertyConditionsMODECONDITIONParserRuleCall_8_0_2 = (RuleCall)cPostPropertyConditionsAlternatives_8_0.eContents().get(2);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cPostRelationsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cPostRelationsRELATIONParserRuleCall_9_0_0 = (RuleCall)cPostRelationsAssignment_9_0.eContents().get(0);
		private final Assignment cPostPropertyConditionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Alternatives cPostPropertyConditionsAlternatives_9_1_0 = (Alternatives)cPostPropertyConditionsAssignment_9_1.eContents().get(0);
		private final RuleCall cPostPropertyConditionsSTATECONDITONParserRuleCall_9_1_0_0 = (RuleCall)cPostPropertyConditionsAlternatives_9_1_0.eContents().get(0);
		private final RuleCall cPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_9_1_0_1 = (RuleCall)cPostPropertyConditionsAlternatives_9_1_0.eContents().get(1);
		private final RuleCall cPostPropertyConditionsMODECONDITIONParserRuleCall_9_1_0_2 = (RuleCall)cPostPropertyConditionsAlternatives_9_1_0.eContents().get(2);
		private final Keyword cFullStopKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PROPERTY:
		//    propertyReqID=ReqID 'when' preOperator= (CTLOperator | LTLOperator) prePropertyConditions+=(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION)*  (preRelations+=RELATION prePropertyConditions+=(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION))* ',' 'then' postOperator=(CTLOperator | LTLOperator) postPropertyConditions+=(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION)*  (postRelations+=RELATION postPropertyConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION))* '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyReqID=ReqID 'when' preOperator= (CTLOperator | LTLOperator) prePropertyConditions+=(STATECONDITON |
		//ATTRIBUTECONTION | MODECONDITION)*  (preRelations+=RELATION prePropertyConditions+=(STATECONDITON |
		//ATTRIBUTECONTION | MODECONDITION))* ',' 'then' postOperator=(CTLOperator | LTLOperator) postPropertyConditions+=(STATECONDITON |
		//ATTRIBUTECONTION | MODECONDITION)*  (postRelations+=RELATION postPropertyConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION))* '.'
		public Group getGroup() { return cGroup; }
		
		//propertyReqID=ReqID
		public Assignment getPropertyReqIDAssignment_0() { return cPropertyReqIDAssignment_0; }
		
		//ReqID
		public RuleCall getPropertyReqIDReqIDParserRuleCall_0_0() { return cPropertyReqIDReqIDParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//preOperator= (CTLOperator | LTLOperator)
		public Assignment getPreOperatorAssignment_2() { return cPreOperatorAssignment_2; }
		
		//(CTLOperator | LTLOperator)
		public Alternatives getPreOperatorAlternatives_2_0() { return cPreOperatorAlternatives_2_0; }
		
		//CTLOperator
		public RuleCall getPreOperatorCTLOperatorParserRuleCall_2_0_0() { return cPreOperatorCTLOperatorParserRuleCall_2_0_0; }
		
		//LTLOperator
		public RuleCall getPreOperatorLTLOperatorParserRuleCall_2_0_1() { return cPreOperatorLTLOperatorParserRuleCall_2_0_1; }
		
		//prePropertyConditions+=(STATECONDITON |
		//   ATTRIBUTECONTION | MODECONDITION)*
		public Assignment getPrePropertyConditionsAssignment_3() { return cPrePropertyConditionsAssignment_3; }
		
		//(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION)
		public Alternatives getPrePropertyConditionsAlternatives_3_0() { return cPrePropertyConditionsAlternatives_3_0; }
		
		//STATECONDITON
		public RuleCall getPrePropertyConditionsSTATECONDITONParserRuleCall_3_0_0() { return cPrePropertyConditionsSTATECONDITONParserRuleCall_3_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_3_0_1() { return cPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_3_0_1; }
		
		//MODECONDITION
		public RuleCall getPrePropertyConditionsMODECONDITIONParserRuleCall_3_0_2() { return cPrePropertyConditionsMODECONDITIONParserRuleCall_3_0_2; }
		
		//(preRelations+=RELATION prePropertyConditions+=(STATECONDITON |
		//  ATTRIBUTECONTION | MODECONDITION))*
		public Group getGroup_4() { return cGroup_4; }
		
		//preRelations+=RELATION
		public Assignment getPreRelationsAssignment_4_0() { return cPreRelationsAssignment_4_0; }
		
		//RELATION
		public RuleCall getPreRelationsRELATIONParserRuleCall_4_0_0() { return cPreRelationsRELATIONParserRuleCall_4_0_0; }
		
		//prePropertyConditions+=(STATECONDITON |
		//   ATTRIBUTECONTION | MODECONDITION)
		public Assignment getPrePropertyConditionsAssignment_4_1() { return cPrePropertyConditionsAssignment_4_1; }
		
		//(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION)
		public Alternatives getPrePropertyConditionsAlternatives_4_1_0() { return cPrePropertyConditionsAlternatives_4_1_0; }
		
		//STATECONDITON
		public RuleCall getPrePropertyConditionsSTATECONDITONParserRuleCall_4_1_0_0() { return cPrePropertyConditionsSTATECONDITONParserRuleCall_4_1_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_4_1_0_1() { return cPrePropertyConditionsATTRIBUTECONTIONParserRuleCall_4_1_0_1; }
		
		//MODECONDITION
		public RuleCall getPrePropertyConditionsMODECONDITIONParserRuleCall_4_1_0_2() { return cPrePropertyConditionsMODECONDITIONParserRuleCall_4_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//postOperator=(CTLOperator | LTLOperator)
		public Assignment getPostOperatorAssignment_7() { return cPostOperatorAssignment_7; }
		
		//(CTLOperator | LTLOperator)
		public Alternatives getPostOperatorAlternatives_7_0() { return cPostOperatorAlternatives_7_0; }
		
		//CTLOperator
		public RuleCall getPostOperatorCTLOperatorParserRuleCall_7_0_0() { return cPostOperatorCTLOperatorParserRuleCall_7_0_0; }
		
		//LTLOperator
		public RuleCall getPostOperatorLTLOperatorParserRuleCall_7_0_1() { return cPostOperatorLTLOperatorParserRuleCall_7_0_1; }
		
		//postPropertyConditions+=(STATECONDITON |
		//   ATTRIBUTECONTION | MODECONDITION)*
		public Assignment getPostPropertyConditionsAssignment_8() { return cPostPropertyConditionsAssignment_8; }
		
		//(STATECONDITON |
		//    ATTRIBUTECONTION | MODECONDITION)
		public Alternatives getPostPropertyConditionsAlternatives_8_0() { return cPostPropertyConditionsAlternatives_8_0; }
		
		//STATECONDITON
		public RuleCall getPostPropertyConditionsSTATECONDITONParserRuleCall_8_0_0() { return cPostPropertyConditionsSTATECONDITONParserRuleCall_8_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_8_0_1() { return cPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_8_0_1; }
		
		//MODECONDITION
		public RuleCall getPostPropertyConditionsMODECONDITIONParserRuleCall_8_0_2() { return cPostPropertyConditionsMODECONDITIONParserRuleCall_8_0_2; }
		
		//(postRelations+=RELATION postPropertyConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION))*
		public Group getGroup_9() { return cGroup_9; }
		
		//postRelations+=RELATION
		public Assignment getPostRelationsAssignment_9_0() { return cPostRelationsAssignment_9_0; }
		
		//RELATION
		public RuleCall getPostRelationsRELATIONParserRuleCall_9_0_0() { return cPostRelationsRELATIONParserRuleCall_9_0_0; }
		
		//postPropertyConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION)
		public Assignment getPostPropertyConditionsAssignment_9_1() { return cPostPropertyConditionsAssignment_9_1; }
		
		//(STATECONDITON | ATTRIBUTECONTION | MODECONDITION)
		public Alternatives getPostPropertyConditionsAlternatives_9_1_0() { return cPostPropertyConditionsAlternatives_9_1_0; }
		
		//STATECONDITON
		public RuleCall getPostPropertyConditionsSTATECONDITONParserRuleCall_9_1_0_0() { return cPostPropertyConditionsSTATECONDITONParserRuleCall_9_1_0_0; }
		
		//ATTRIBUTECONTION
		public RuleCall getPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_9_1_0_1() { return cPostPropertyConditionsATTRIBUTECONTIONParserRuleCall_9_1_0_1; }
		
		//MODECONDITION
		public RuleCall getPostPropertyConditionsMODECONDITIONParserRuleCall_9_1_0_2() { return cPostPropertyConditionsMODECONDITIONParserRuleCall_9_1_0_2; }
		
		//'.'
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }
	}
	public class RANGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.RANG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCompOperator1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCompOperator1COMPARISONOPERATORParserRuleCall_0_0 = (RuleCall)cCompOperator1Assignment_0.eContents().get(0);
		private final Assignment cBound1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBound1ATTRIBUTEVALUEParserRuleCall_1_0 = (RuleCall)cBound1Assignment_1.eContents().get(0);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCompOperator2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompOperator2COMPARISONOPERATORParserRuleCall_3_0 = (RuleCall)cCompOperator2Assignment_3.eContents().get(0);
		private final Assignment cBound2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBound2ATTRIBUTEVALUEParserRuleCall_4_0 = (RuleCall)cBound2Assignment_4.eContents().get(0);
		private final Assignment cUnitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitUNITParserRuleCall_5_0 = (RuleCall)cUnitAssignment_5.eContents().get(0);
		
		//RANG:
		//    compOperator1=COMPARISONOPERATOR bound1=ATTRIBUTEVALUE 'and' compOperator2=COMPARISONOPERATOR bound2=ATTRIBUTEVALUE unit=UNIT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//compOperator1=COMPARISONOPERATOR bound1=ATTRIBUTEVALUE 'and' compOperator2=COMPARISONOPERATOR bound2=ATTRIBUTEVALUE unit=UNIT
		public Group getGroup() { return cGroup; }
		
		//compOperator1=COMPARISONOPERATOR
		public Assignment getCompOperator1Assignment_0() { return cCompOperator1Assignment_0; }
		
		//COMPARISONOPERATOR
		public RuleCall getCompOperator1COMPARISONOPERATORParserRuleCall_0_0() { return cCompOperator1COMPARISONOPERATORParserRuleCall_0_0; }
		
		//bound1=ATTRIBUTEVALUE
		public Assignment getBound1Assignment_1() { return cBound1Assignment_1; }
		
		//ATTRIBUTEVALUE
		public RuleCall getBound1ATTRIBUTEVALUEParserRuleCall_1_0() { return cBound1ATTRIBUTEVALUEParserRuleCall_1_0; }
		
		//'and'
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
		
		//compOperator2=COMPARISONOPERATOR
		public Assignment getCompOperator2Assignment_3() { return cCompOperator2Assignment_3; }
		
		//COMPARISONOPERATOR
		public RuleCall getCompOperator2COMPARISONOPERATORParserRuleCall_3_0() { return cCompOperator2COMPARISONOPERATORParserRuleCall_3_0; }
		
		//bound2=ATTRIBUTEVALUE
		public Assignment getBound2Assignment_4() { return cBound2Assignment_4; }
		
		//ATTRIBUTEVALUE
		public RuleCall getBound2ATTRIBUTEVALUEParserRuleCall_4_0() { return cBound2ATTRIBUTEVALUEParserRuleCall_4_0; }
		
		//unit=UNIT
		public Assignment getUnitAssignment_5() { return cUnitAssignment_5; }
		
		//UNIT
		public RuleCall getUnitUNITParserRuleCall_5_0() { return cUnitUNITParserRuleCall_5_0; }
	}
	public class CTLOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.CTLOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAGParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAFParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEFParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEGParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAXParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//CTLOperator:
		//    AG | AF | EF | EG | AX
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AG | AF | EF | EG | AX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AG
		public RuleCall getAGParserRuleCall_0() { return cAGParserRuleCall_0; }
		
		//AF
		public RuleCall getAFParserRuleCall_1() { return cAFParserRuleCall_1; }
		
		//EF
		public RuleCall getEFParserRuleCall_2() { return cEFParserRuleCall_2; }
		
		//EG
		public RuleCall getEGParserRuleCall_3() { return cEGParserRuleCall_3; }
		
		//AX
		public RuleCall getAXParserRuleCall_4() { return cAXParserRuleCall_4; }
	}
	public class AXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.AX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAxAllKeyword_0_0 = (Keyword)cAxAssignment_0.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AX:
		//    ax='all' 'next'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ax='all' 'next'
		public Group getGroup() { return cGroup; }
		
		//ax='all'
		public Assignment getAxAssignment_0() { return cAxAssignment_0; }
		
		//'all'
		public Keyword getAxAllKeyword_0_0() { return cAxAllKeyword_0_0; }
		
		//'next'
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }
	}
	public class EGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.EG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEgExistKeyword_0_0 = (Keyword)cEgAssignment_0.eContents().get(0);
		private final Keyword cGloballyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EG:
		//    eg='exist' 'globally'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//eg='exist' 'globally'
		public Group getGroup() { return cGroup; }
		
		//eg='exist'
		public Assignment getEgAssignment_0() { return cEgAssignment_0; }
		
		//'exist'
		public Keyword getEgExistKeyword_0_0() { return cEgExistKeyword_0_0; }
		
		//'globally'
		public Keyword getGloballyKeyword_1() { return cGloballyKeyword_1; }
	}
	public class EFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.EF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEfExistKeyword_0_0 = (Keyword)cEfAssignment_0.eContents().get(0);
		private final Keyword cFutureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EF:
		//    ef='exist' 'future'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ef='exist' 'future'
		public Group getGroup() { return cGroup; }
		
		//ef='exist'
		public Assignment getEfAssignment_0() { return cEfAssignment_0; }
		
		//'exist'
		public Keyword getEfExistKeyword_0_0() { return cEfExistKeyword_0_0; }
		
		//'future'
		public Keyword getFutureKeyword_1() { return cFutureKeyword_1; }
	}
	public class AFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.AF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAfAllKeyword_0_0 = (Keyword)cAfAssignment_0.eContents().get(0);
		private final Keyword cFutureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AF:
		//    af='all' 'future'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//af='all' 'future'
		public Group getGroup() { return cGroup; }
		
		//af='all'
		public Assignment getAfAssignment_0() { return cAfAssignment_0; }
		
		//'all'
		public Keyword getAfAllKeyword_0_0() { return cAfAllKeyword_0_0; }
		
		//'future'
		public Keyword getFutureKeyword_1() { return cFutureKeyword_1; }
	}
	public class AGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.AG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAgAllKeyword_0_0 = (Keyword)cAgAssignment_0.eContents().get(0);
		private final Keyword cGloballyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AG:
		//    ag='all' 'globally'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ag='all' 'globally'
		public Group getGroup() { return cGroup; }
		
		//ag='all'
		public Assignment getAgAssignment_0() { return cAgAssignment_0; }
		
		//'all'
		public Keyword getAgAllKeyword_0_0() { return cAgAllKeyword_0_0; }
		
		//'globally'
		public Keyword getGloballyKeyword_1() { return cGloballyKeyword_1; }
	}
	public class LTLOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.LTLOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LTLOperator:
		//    F | G | X
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//F | G | X
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//F
		public RuleCall getFParserRuleCall_0() { return cFParserRuleCall_0; }
		
		//G
		public RuleCall getGParserRuleCall_1() { return cGParserRuleCall_1; }
		
		//X
		public RuleCall getXParserRuleCall_2() { return cXParserRuleCall_2; }
	}
	public class FElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.F");
		private final Assignment cFAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFFutureKeyword_0 = (Keyword)cFAssignment.eContents().get(0);
		
		//F:
		//    f='future'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//f='future'
		public Assignment getFAssignment() { return cFAssignment; }
		
		//'future'
		public Keyword getFFutureKeyword_0() { return cFFutureKeyword_0; }
	}
	public class GElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.G");
		private final Assignment cGAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cGGloballyKeyword_0 = (Keyword)cGAssignment.eContents().get(0);
		
		//G:
		//    g='globally'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//g='globally'
		public Assignment getGAssignment() { return cGAssignment; }
		
		//'globally'
		public Keyword getGGloballyKeyword_0() { return cGGloballyKeyword_0; }
	}
	public class XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.X");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cXNextKeyword_0 = (Keyword)cXAssignment.eContents().get(0);
		
		//X:
		//    x='next'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x='next'
		public Assignment getXAssignment() { return cXAssignment; }
		
		//'next'
		public Keyword getXNextKeyword_0() { return cXNextKeyword_0; }
	}
	public class RELATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.RELATION");
		private final Assignment cRelaionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cRelaionAlternatives_0 = (Alternatives)cRelaionAssignment.eContents().get(0);
		private final Keyword cRelaionAndKeyword_0_0 = (Keyword)cRelaionAlternatives_0.eContents().get(0);
		private final Keyword cRelaionOrKeyword_0_1 = (Keyword)cRelaionAlternatives_0.eContents().get(1);
		
		//RELATION:
		//    relaion=('and' | 'or')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//relaion=('and' | 'or')
		public Assignment getRelaionAssignment() { return cRelaionAssignment; }
		
		//('and' | 'or')
		public Alternatives getRelaionAlternatives_0() { return cRelaionAlternatives_0; }
		
		//'and'
		public Keyword getRelaionAndKeyword_0_0() { return cRelaionAndKeyword_0_0; }
		
		//'or'
		public Keyword getRelaionOrKeyword_0_1() { return cRelaionOrKeyword_0_1; }
	}
	public class SIGNALCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.SIGNALCONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cReceivesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignalNameIDTerminalRuleCall_3_0 = (RuleCall)cSignalNameAssignment_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SIGNALCONDITION:
		//    ID (ID)* 'receives' signalName=ID ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (ID)* 'receives' signalName=ID ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'receives'
		public Keyword getReceivesKeyword_2() { return cReceivesKeyword_2; }
		
		//signalName=ID
		public Assignment getSignalNameAssignment_3() { return cSignalNameAssignment_3; }
		
		//ID
		public RuleCall getSignalNameIDTerminalRuleCall_3_0() { return cSignalNameIDTerminalRuleCall_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}
	public class ReqIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ReqID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReqIDINTTerminalRuleCall_1_0 = (RuleCall)cReqIDAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReqIDAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReqIDINTTerminalRuleCall_2_1_0 = (RuleCall)cReqIDAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReqID:
		//    '[' reqID+=INT ('.'reqID+=INT)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' reqID+=INT ('.'reqID+=INT)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//reqID+=INT
		public Assignment getReqIDAssignment_1() { return cReqIDAssignment_1; }
		
		//INT
		public RuleCall getReqIDINTTerminalRuleCall_1_0() { return cReqIDINTTerminalRuleCall_1_0; }
		
		//('.'reqID+=INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//reqID+=INT
		public Assignment getReqIDAssignment_2_1() { return cReqIDAssignment_2_1; }
		
		//INT
		public RuleCall getReqIDINTTerminalRuleCall_2_1_0() { return cReqIDINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ATTRIBUTECONTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ATTRIBUTECONTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAttributeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeNameIDTerminalRuleCall_2_0 = (RuleCall)cAttributeNameAssignment_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorCOMPARISONOPERATORParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		private final Assignment cAttributeValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributeValueATTRIBUTEVALUEParserRuleCall_5_0 = (RuleCall)cAttributeValueAssignment_5.eContents().get(0);
		private final Assignment cUnitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUnitUNITParserRuleCall_6_0 = (RuleCall)cUnitAssignment_6.eContents().get(0);
		
		//ATTRIBUTECONTION:
		//    ID (ID)* attributeName=ID ID operator=COMPARISONOPERATOR attributeValue=ATTRIBUTEVALUE (unit+=UNIT)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (ID)* attributeName=ID ID operator=COMPARISONOPERATOR attributeValue=ATTRIBUTEVALUE (unit+=UNIT)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//attributeName=ID
		public Assignment getAttributeNameAssignment_2() { return cAttributeNameAssignment_2; }
		
		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_2_0() { return cAttributeNameIDTerminalRuleCall_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//operator=COMPARISONOPERATOR
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//COMPARISONOPERATOR
		public RuleCall getOperatorCOMPARISONOPERATORParserRuleCall_4_0() { return cOperatorCOMPARISONOPERATORParserRuleCall_4_0; }
		
		//attributeValue=ATTRIBUTEVALUE
		public Assignment getAttributeValueAssignment_5() { return cAttributeValueAssignment_5; }
		
		//ATTRIBUTEVALUE
		public RuleCall getAttributeValueATTRIBUTEVALUEParserRuleCall_5_0() { return cAttributeValueATTRIBUTEVALUEParserRuleCall_5_0; }
		
		//(unit+=UNIT)*
		public Assignment getUnitAssignment_6() { return cUnitAssignment_6; }
		
		//UNIT
		public RuleCall getUnitUNITParserRuleCall_6_0() { return cUnitUNITParserRuleCall_6_0; }
	}
	public class UNITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.UNIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPEEDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cACCParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTIMEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWEIGHTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UNIT:
		//    SPEED | ACC | TIME | WEIGHT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SPEED | ACC | TIME | WEIGHT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPEED
		public RuleCall getSPEEDParserRuleCall_0() { return cSPEEDParserRuleCall_0; }
		
		//ACC
		public RuleCall getACCParserRuleCall_1() { return cACCParserRuleCall_1; }
		
		//TIME
		public RuleCall getTIMEParserRuleCall_2() { return cTIMEParserRuleCall_2; }
		
		//WEIGHT
		public RuleCall getWEIGHTParserRuleCall_3() { return cWEIGHTParserRuleCall_3; }
	}
	public class ACCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ACC");
		private final Assignment cAccAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAccMS2Keyword_0 = (Keyword)cAccAssignment.eContents().get(0);
		
		//ACC:
		//    acc='m/s2'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//acc='m/s2'
		public Assignment getAccAssignment() { return cAccAssignment; }
		
		//'m/s2'
		public Keyword getAccMS2Keyword_0() { return cAccMS2Keyword_0; }
	}
	public class WEIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.WEIGHT");
		private final Assignment cWeightAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cWeightKgKeyword_0 = (Keyword)cWeightAssignment.eContents().get(0);
		
		//WEIGHT:
		//    weight='kg'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//weight='kg'
		public Assignment getWeightAssignment() { return cWeightAssignment; }
		
		//'kg'
		public Keyword getWeightKgKeyword_0() { return cWeightKgKeyword_0; }
	}
	public class TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.TIME");
		private final Assignment cTimeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTimeSKeyword_0 = (Keyword)cTimeAssignment.eContents().get(0);
		
		//TIME:
		//    time='s'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//time='s'
		public Assignment getTimeAssignment() { return cTimeAssignment; }
		
		//'s'
		public Keyword getTimeSKeyword_0() { return cTimeSKeyword_0; }
	}
	public class SPEEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.SPEED");
		private final Assignment cSpeedAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSpeedKmHKeyword_0 = (Keyword)cSpeedAssignment.eContents().get(0);
		
		//SPEED:
		//    speed='km/h'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//speed='km/h'
		public Assignment getSpeedAssignment() { return cSpeedAssignment; }
		
		//'km/h'
		public Keyword getSpeedKmHKeyword_0() { return cSpeedKmHKeyword_0; }
	}
	public class ATTRIBUTEVALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ATTRIBUTEVALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTYPEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLEANTYPEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ATTRIBUTEVALUE:
		//    INTTYPE | STRINGTYPE | BOOLEANTYPE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INTTYPE | STRINGTYPE | BOOLEANTYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTTYPE
		public RuleCall getINTTYPEParserRuleCall_0() { return cINTTYPEParserRuleCall_0; }
		
		//STRINGTYPE
		public RuleCall getSTRINGTYPEParserRuleCall_1() { return cSTRINGTYPEParserRuleCall_1; }
		
		//BOOLEANTYPE
		public RuleCall getBOOLEANTYPEParserRuleCall_2() { return cBOOLEANTYPEParserRuleCall_2; }
	}
	public class STRINGTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.STRINGTYPE");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_0 = (RuleCall)cStringAssignment.eContents().get(0);
		
		//STRINGTYPE:
		//    string=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//string=STRING
		public Assignment getStringAssignment() { return cStringAssignment; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0() { return cStringSTRINGTerminalRuleCall_0; }
	}
	public class INTTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.INTTYPE");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0 = (RuleCall)cIntAssignment.eContents().get(0);
		
		//INTTYPE:
		//    int=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT
		public Assignment getIntAssignment() { return cIntAssignment; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0() { return cIntINTTerminalRuleCall_0; }
	}
	public class BOOLEANTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.BOOLEANTYPE");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTRUEKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BOOLEANTYPE:
		//    value=('TRUE' | 'FALSE')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=('TRUE' | 'FALSE')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_0_0() { return cValueTRUEKeyword_0_0; }
		
		//'FALSE'
		public Keyword getValueFALSEKeyword_0_1() { return cValueFALSEKeyword_0_1; }
	}
	public class STATECONDITONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.STATECONDITON");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cStateKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStateNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStateNameIDTerminalRuleCall_0_3_0 = (RuleCall)cStateNameAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cCompOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cCompOperatorCOMPARISONOPERATORParserRuleCall_1_0_1_0 = (RuleCall)cCompOperatorAssignment_1_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cStateKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStateNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStateNameIDTerminalRuleCall_1_3_0 = (RuleCall)cStateNameAssignment_1_3.eContents().get(0);
		
		//STATECONDITON:
		//    ((ID (ID)* 'state' stateName=ID) | ((ID)* compOperator=COMPARISONOPERATOR) (ID)* 'state' stateName=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((ID (ID)* 'state' stateName=ID) | ((ID)* compOperator=COMPARISONOPERATOR) (ID)* 'state' stateName=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(ID (ID)* 'state' stateName=ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//'state'
		public Keyword getStateKeyword_0_2() { return cStateKeyword_0_2; }
		
		//stateName=ID
		public Assignment getStateNameAssignment_0_3() { return cStateNameAssignment_0_3; }
		
		//ID
		public RuleCall getStateNameIDTerminalRuleCall_0_3_0() { return cStateNameIDTerminalRuleCall_0_3_0; }
		
		//((ID)* compOperator=COMPARISONOPERATOR) (ID)* 'state' stateName=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//((ID)* compOperator=COMPARISONOPERATOR)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_1_0_0() { return cIDTerminalRuleCall_1_0_0; }
		
		//compOperator=COMPARISONOPERATOR
		public Assignment getCompOperatorAssignment_1_0_1() { return cCompOperatorAssignment_1_0_1; }
		
		//COMPARISONOPERATOR
		public RuleCall getCompOperatorCOMPARISONOPERATORParserRuleCall_1_0_1_0() { return cCompOperatorCOMPARISONOPERATORParserRuleCall_1_0_1_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//'state'
		public Keyword getStateKeyword_1_2() { return cStateKeyword_1_2; }
		
		//stateName=ID
		public Assignment getStateNameAssignment_1_3() { return cStateNameAssignment_1_3; }
		
		//ID
		public RuleCall getStateNameIDTerminalRuleCall_1_3_0() { return cStateNameIDTerminalRuleCall_1_3_0; }
	}
	public class MODECONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.MODECONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cModeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeNameIDTerminalRuleCall_3_0 = (RuleCall)cModeNameAssignment_3.eContents().get(0);
		
		//MODECONDITION:
		//    ID (ID)* 'mode' modeName=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (ID)* 'mode' modeName=ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'mode'
		public Keyword getModeKeyword_2() { return cModeKeyword_2; }
		
		//modeName=ID
		public Assignment getModeNameAssignment_3() { return cModeNameAssignment_3; }
		
		//ID
		public RuleCall getModeNameIDTerminalRuleCall_3_0() { return cModeNameIDTerminalRuleCall_3_0; }
	}
	public class ARITHMETICCONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ARITHMETICCONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultIDTerminalRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cCompconditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompconditionCOMPARISONOPERATORParserRuleCall_3_0 = (RuleCall)cCompconditionAssignment_3.eContents().get(0);
		private final Assignment cVar1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVar1IDTerminalRuleCall_4_0 = (RuleCall)cVar1Assignment_4.eContents().get(0);
		private final Assignment cArithmeticOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArithmeticOperatorARITHMETICOPERATORParserRuleCall_5_0 = (RuleCall)cArithmeticOperatorAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cVar2Assignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cVar2IDTerminalRuleCall_6_0_0 = (RuleCall)cVar2Assignment_6_0.eContents().get(0);
		private final Assignment cVar3Assignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cVar3INTTerminalRuleCall_6_1_0 = (RuleCall)cVar3Assignment_6_1.eContents().get(0);
		
		//ARITHMETICCONDITION:
		//    ID result=ID (ID)* compcondition=COMPARISONOPERATOR var1=ID arithmeticOperator=ARITHMETICOPERATOR (var2 = ID | var3 =INT )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID result=ID (ID)* compcondition=COMPARISONOPERATOR var1=ID arithmeticOperator=ARITHMETICOPERATOR (var2 = ID | var3 =INT )
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//result=ID
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//ID
		public RuleCall getResultIDTerminalRuleCall_1_0() { return cResultIDTerminalRuleCall_1_0; }
		
		//(ID)*
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//compcondition=COMPARISONOPERATOR
		public Assignment getCompconditionAssignment_3() { return cCompconditionAssignment_3; }
		
		//COMPARISONOPERATOR
		public RuleCall getCompconditionCOMPARISONOPERATORParserRuleCall_3_0() { return cCompconditionCOMPARISONOPERATORParserRuleCall_3_0; }
		
		//var1=ID
		public Assignment getVar1Assignment_4() { return cVar1Assignment_4; }
		
		//ID
		public RuleCall getVar1IDTerminalRuleCall_4_0() { return cVar1IDTerminalRuleCall_4_0; }
		
		//arithmeticOperator=ARITHMETICOPERATOR
		public Assignment getArithmeticOperatorAssignment_5() { return cArithmeticOperatorAssignment_5; }
		
		//ARITHMETICOPERATOR
		public RuleCall getArithmeticOperatorARITHMETICOPERATORParserRuleCall_5_0() { return cArithmeticOperatorARITHMETICOPERATORParserRuleCall_5_0; }
		
		//(var2 = ID | var3 =INT )
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//var2 = ID
		public Assignment getVar2Assignment_6_0() { return cVar2Assignment_6_0; }
		
		//ID
		public RuleCall getVar2IDTerminalRuleCall_6_0_0() { return cVar2IDTerminalRuleCall_6_0_0; }
		
		//var3 =INT
		public Assignment getVar3Assignment_6_1() { return cVar3Assignment_6_1; }
		
		//INT
		public RuleCall getVar3INTTerminalRuleCall_6_1_0() { return cVar3INTTerminalRuleCall_6_1_0; }
	}
	public class ARITHMETICOPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ARITHMETICOPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cADDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSUBTRACTIONParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMULTIPLICATIONParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDIVISIONParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMODULEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ARITHMETICOPERATOR:
		//    (ADD | SUBTRACTION | MULTIPLICATION | DIVISION | MODULE)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ADD | SUBTRACTION | MULTIPLICATION | DIVISION | MODULE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD
		public RuleCall getADDParserRuleCall_0() { return cADDParserRuleCall_0; }
		
		//SUBTRACTION
		public RuleCall getSUBTRACTIONParserRuleCall_1() { return cSUBTRACTIONParserRuleCall_1; }
		
		//MULTIPLICATION
		public RuleCall getMULTIPLICATIONParserRuleCall_2() { return cMULTIPLICATIONParserRuleCall_2; }
		
		//DIVISION
		public RuleCall getDIVISIONParserRuleCall_3() { return cDIVISIONParserRuleCall_3; }
		
		//MODULE
		public RuleCall getMODULEParserRuleCall_4() { return cMODULEParserRuleCall_4; }
	}
	public class MODULEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.MODULE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAddModuledKeyword_0_0 = (Keyword)cAddAssignment_0.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MODULE:
		//    add='moduled' 'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//add='moduled' 'by'
		public Group getGroup() { return cGroup; }
		
		//add='moduled'
		public Assignment getAddAssignment_0() { return cAddAssignment_0; }
		
		//'moduled'
		public Keyword getAddModuledKeyword_0_0() { return cAddModuledKeyword_0_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
	}
	public class DIVISIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.DIVISION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDivisionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDivisionDividedKeyword_0_0 = (Keyword)cDivisionAssignment_0.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DIVISION:
		//    division='divided' 'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//division='divided' 'by'
		public Group getGroup() { return cGroup; }
		
		//division='divided'
		public Assignment getDivisionAssignment_0() { return cDivisionAssignment_0; }
		
		//'divided'
		public Keyword getDivisionDividedKeyword_0_0() { return cDivisionDividedKeyword_0_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
	}
	public class MULTIPLICATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.MULTIPLICATION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMultiplicationMultipliedKeyword_0_0 = (Keyword)cMultiplicationAssignment_0.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MULTIPLICATION:
		//    multiplication='multiplied' 'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplication='multiplied' 'by'
		public Group getGroup() { return cGroup; }
		
		//multiplication='multiplied'
		public Assignment getMultiplicationAssignment_0() { return cMultiplicationAssignment_0; }
		
		//'multiplied'
		public Keyword getMultiplicationMultipliedKeyword_0_0() { return cMultiplicationMultipliedKeyword_0_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
	}
	public class SUBTRACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.SUBTRACTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubstractionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSubstractionSubtractedKeyword_0_0 = (Keyword)cSubstractionAssignment_0.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SUBTRACTION:
		//    substraction='subtracted' 'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//substraction='subtracted' 'by'
		public Group getGroup() { return cGroup; }
		
		//substraction='subtracted'
		public Assignment getSubstractionAssignment_0() { return cSubstractionAssignment_0; }
		
		//'subtracted'
		public Keyword getSubstractionSubtractedKeyword_0_0() { return cSubstractionSubtractedKeyword_0_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
	}
	public class ADDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.ADD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAddAddedKeyword_0_0 = (Keyword)cAddAssignment_0.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ADD:
		//    add='added' 'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//add='added' 'by'
		public Group getGroup() { return cGroup; }
		
		//add='added'
		public Assignment getAddAssignment_0() { return cAddAssignment_0; }
		
		//'added'
		public Keyword getAddAddedKeyword_0_0() { return cAddAddedKeyword_0_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
	}
	public class COMPARISONOPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.COMPARISONOPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEQUALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLESSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGREATERParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNOTEQUALParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLESSEQUALParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGREATEQUALParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNOTParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//COMPARISONOPERATOR:
		//     (EQUAL | LESS | GREATER | NOTEQUAL | LESSEQUAL | GREATEQUAL | NOT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(EQUAL | LESS | GREATER | NOTEQUAL | LESSEQUAL | GREATEQUAL | NOT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL
		public RuleCall getEQUALParserRuleCall_0() { return cEQUALParserRuleCall_0; }
		
		//LESS
		public RuleCall getLESSParserRuleCall_1() { return cLESSParserRuleCall_1; }
		
		//GREATER
		public RuleCall getGREATERParserRuleCall_2() { return cGREATERParserRuleCall_2; }
		
		//NOTEQUAL
		public RuleCall getNOTEQUALParserRuleCall_3() { return cNOTEQUALParserRuleCall_3; }
		
		//LESSEQUAL
		public RuleCall getLESSEQUALParserRuleCall_4() { return cLESSEQUALParserRuleCall_4; }
		
		//GREATEQUAL
		public RuleCall getGREATEQUALParserRuleCall_5() { return cGREATEQUALParserRuleCall_5; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_6() { return cNOTParserRuleCall_6; }
	}
	public class NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.NOT");
		private final Assignment cNotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotAssignment.eContents().get(0);
		
		//NOT:
		//    not="not"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//not="not"
		public Assignment getNotAssignment() { return cNotAssignment; }
		
		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	public class GREATEQUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.GREATEQUAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGreateEqualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGreateEqualGreaterKeyword_0_0 = (Keyword)cGreateEqualAssignment_0.eContents().get(0);
		private final Assignment cGreateEqualAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGreateEqualOrKeyword_1_0 = (Keyword)cGreateEqualAssignment_1.eContents().get(0);
		private final Assignment cGreateEqualAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cGreateEqualEqualKeyword_2_0 = (Keyword)cGreateEqualAssignment_2.eContents().get(0);
		private final Assignment cGreateEqualAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cGreateEqualToKeyword_3_0 = (Keyword)cGreateEqualAssignment_3.eContents().get(0);
		
		//GREATEQUAL:
		//    greateEqual+='greater' greateEqual+='or' greateEqual+='equal' greateEqual+='to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//greateEqual+='greater' greateEqual+='or' greateEqual+='equal' greateEqual+='to'
		public Group getGroup() { return cGroup; }
		
		//greateEqual+='greater'
		public Assignment getGreateEqualAssignment_0() { return cGreateEqualAssignment_0; }
		
		//'greater'
		public Keyword getGreateEqualGreaterKeyword_0_0() { return cGreateEqualGreaterKeyword_0_0; }
		
		//greateEqual+='or'
		public Assignment getGreateEqualAssignment_1() { return cGreateEqualAssignment_1; }
		
		//'or'
		public Keyword getGreateEqualOrKeyword_1_0() { return cGreateEqualOrKeyword_1_0; }
		
		//greateEqual+='equal'
		public Assignment getGreateEqualAssignment_2() { return cGreateEqualAssignment_2; }
		
		//'equal'
		public Keyword getGreateEqualEqualKeyword_2_0() { return cGreateEqualEqualKeyword_2_0; }
		
		//greateEqual+='to'
		public Assignment getGreateEqualAssignment_3() { return cGreateEqualAssignment_3; }
		
		//'to'
		public Keyword getGreateEqualToKeyword_3_0() { return cGreateEqualToKeyword_3_0; }
	}
	public class LESSEQUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.LESSEQUAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLessEqualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLessEqualLessKeyword_0_0 = (Keyword)cLessEqualAssignment_0.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LESSEQUAL:
		//    lessEqual='less' 'or' 'equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lessEqual='less' 'or' 'equal' 'to'
		public Group getGroup() { return cGroup; }
		
		//lessEqual='less'
		public Assignment getLessEqualAssignment_0() { return cLessEqualAssignment_0; }
		
		//'less'
		public Keyword getLessEqualLessKeyword_0_0() { return cLessEqualLessKeyword_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2() { return cEqualKeyword_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
	}
	public class NOTEQUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.NOTEQUAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotEqualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotEqualNotKeyword_0_0 = (Keyword)cNotEqualAssignment_0.eContents().get(0);
		private final Keyword cEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NOTEQUAL:
		//    notEqual='not' 'equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//notEqual='not' 'equal' 'to'
		public Group getGroup() { return cGroup; }
		
		//notEqual='not'
		public Assignment getNotEqualAssignment_0() { return cNotEqualAssignment_0; }
		
		//'not'
		public Keyword getNotEqualNotKeyword_0_0() { return cNotEqualNotKeyword_0_0; }
		
		//'equal'
		public Keyword getEqualKeyword_1() { return cEqualKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
	}
	public class GREATERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.GREATER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGreaterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGreaterGreaterKeyword_0_0 = (Keyword)cGreaterAssignment_0.eContents().get(0);
		private final Keyword cThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GREATER:
		//    greater='greater' 'than'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//greater='greater' 'than'
		public Group getGroup() { return cGroup; }
		
		//greater='greater'
		public Assignment getGreaterAssignment_0() { return cGreaterAssignment_0; }
		
		//'greater'
		public Keyword getGreaterGreaterKeyword_0_0() { return cGreaterGreaterKeyword_0_0; }
		
		//'than'
		public Keyword getThanKeyword_1() { return cThanKeyword_1; }
	}
	public class LESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.LESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLessLessKeyword_0_0 = (Keyword)cLessAssignment_0.eContents().get(0);
		private final Assignment cLessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLessThanKeyword_1_0 = (Keyword)cLessAssignment_1.eContents().get(0);
		
		//LESS:
		//    less+='less' less+='than'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//less+='less' less+='than'
		public Group getGroup() { return cGroup; }
		
		//less+='less'
		public Assignment getLessAssignment_0() { return cLessAssignment_0; }
		
		//'less'
		public Keyword getLessLessKeyword_0_0() { return cLessLessKeyword_0_0; }
		
		//less+='than'
		public Assignment getLessAssignment_1() { return cLessAssignment_1; }
		
		//'than'
		public Keyword getLessThanKeyword_1_0() { return cLessThanKeyword_1_0; }
	}
	public class EQUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mostml.MoStML.EQUAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEqualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEqualEqualKeyword_0_0 = (Keyword)cEqualAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EQUAL:
		//    equal='equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//equal='equal' 'to'
		public Group getGroup() { return cGroup; }
		
		//equal='equal'
		public Assignment getEqualAssignment_0() { return cEqualAssignment_0; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_0_0() { return cEqualEqualKeyword_0_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
	}
	
	
	private final MoStElements pMoSt;
	private final NLRequirementElements pNLRequirement;
	private final RequirementElements pRequirement;
	private final EnvironmentElements pEnvironment;
	private final MODEElements pMODE;
	private final STATEElements pSTATE;
	private final CONSTRAINTElements pCONSTRAINT;
	private final PROPERTYElements pPROPERTY;
	private final RANGElements pRANG;
	private final CTLOperatorElements pCTLOperator;
	private final AXElements pAX;
	private final EGElements pEG;
	private final EFElements pEF;
	private final AFElements pAF;
	private final AGElements pAG;
	private final LTLOperatorElements pLTLOperator;
	private final FElements pF;
	private final GElements pG;
	private final XElements pX;
	private final RELATIONElements pRELATION;
	private final SIGNALCONDITIONElements pSIGNALCONDITION;
	private final ReqIDElements pReqID;
	private final ATTRIBUTECONTIONElements pATTRIBUTECONTION;
	private final UNITElements pUNIT;
	private final ACCElements pACC;
	private final WEIGHTElements pWEIGHT;
	private final TIMEElements pTIME;
	private final SPEEDElements pSPEED;
	private final ATTRIBUTEVALUEElements pATTRIBUTEVALUE;
	private final STRINGTYPEElements pSTRINGTYPE;
	private final INTTYPEElements pINTTYPE;
	private final BOOLEANTYPEElements pBOOLEANTYPE;
	private final STATECONDITONElements pSTATECONDITON;
	private final MODECONDITIONElements pMODECONDITION;
	private final ARITHMETICCONDITIONElements pARITHMETICCONDITION;
	private final ARITHMETICOPERATORElements pARITHMETICOPERATOR;
	private final MODULEElements pMODULE;
	private final DIVISIONElements pDIVISION;
	private final MULTIPLICATIONElements pMULTIPLICATION;
	private final SUBTRACTIONElements pSUBTRACTION;
	private final ADDElements pADD;
	private final COMPARISONOPERATORElements pCOMPARISONOPERATOR;
	private final NOTElements pNOT;
	private final GREATEQUALElements pGREATEQUAL;
	private final LESSEQUALElements pLESSEQUAL;
	private final NOTEQUALElements pNOTEQUAL;
	private final GREATERElements pGREATER;
	private final LESSElements pLESS;
	private final EQUALElements pEQUAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MoStMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMoSt = new MoStElements();
		this.pNLRequirement = new NLRequirementElements();
		this.pRequirement = new RequirementElements();
		this.pEnvironment = new EnvironmentElements();
		this.pMODE = new MODEElements();
		this.pSTATE = new STATEElements();
		this.pCONSTRAINT = new CONSTRAINTElements();
		this.pPROPERTY = new PROPERTYElements();
		this.pRANG = new RANGElements();
		this.pCTLOperator = new CTLOperatorElements();
		this.pAX = new AXElements();
		this.pEG = new EGElements();
		this.pEF = new EFElements();
		this.pAF = new AFElements();
		this.pAG = new AGElements();
		this.pLTLOperator = new LTLOperatorElements();
		this.pF = new FElements();
		this.pG = new GElements();
		this.pX = new XElements();
		this.pRELATION = new RELATIONElements();
		this.pSIGNALCONDITION = new SIGNALCONDITIONElements();
		this.pReqID = new ReqIDElements();
		this.pATTRIBUTECONTION = new ATTRIBUTECONTIONElements();
		this.pUNIT = new UNITElements();
		this.pACC = new ACCElements();
		this.pWEIGHT = new WEIGHTElements();
		this.pTIME = new TIMEElements();
		this.pSPEED = new SPEEDElements();
		this.pATTRIBUTEVALUE = new ATTRIBUTEVALUEElements();
		this.pSTRINGTYPE = new STRINGTYPEElements();
		this.pINTTYPE = new INTTYPEElements();
		this.pBOOLEANTYPE = new BOOLEANTYPEElements();
		this.pSTATECONDITON = new STATECONDITONElements();
		this.pMODECONDITION = new MODECONDITIONElements();
		this.pARITHMETICCONDITION = new ARITHMETICCONDITIONElements();
		this.pARITHMETICOPERATOR = new ARITHMETICOPERATORElements();
		this.pMODULE = new MODULEElements();
		this.pDIVISION = new DIVISIONElements();
		this.pMULTIPLICATION = new MULTIPLICATIONElements();
		this.pSUBTRACTION = new SUBTRACTIONElements();
		this.pADD = new ADDElements();
		this.pCOMPARISONOPERATOR = new COMPARISONOPERATORElements();
		this.pNOT = new NOTElements();
		this.pGREATEQUAL = new GREATEQUALElements();
		this.pLESSEQUAL = new LESSEQUALElements();
		this.pNOTEQUAL = new NOTEQUALElements();
		this.pGREATER = new GREATERElements();
		this.pLESS = new LESSElements();
		this.pEQUAL = new EQUALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mostml.MoStML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MoSt:
	//    model+=(Requirement | NLRequirement )*
	//;
	public MoStElements getMoStAccess() {
		return pMoSt;
	}
	
	public ParserRule getMoStRule() {
		return getMoStAccess().getRule();
	}
	
	//NLRequirement:
	//    nlReqID=ReqID ID (ID)* '.';
	public NLRequirementElements getNLRequirementAccess() {
		return pNLRequirement;
	}
	
	public ParserRule getNLRequirementRule() {
		return getNLRequirementAccess().getRule();
	}
	
	//Requirement:
	//    MODE | STATE | PROPERTY |  CONSTRAINT | Environment
	//;
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//Environment:
	//    envirReqID=ReqID ID envirVariable=ID (ID)*  (('initialised' 'to' envirAttributeValue=ATTRIBUTEVALUE
	//    (envirUnit+=UNIT)*) | (range=RANG)) (ID)*'.'
	//;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//MODE:
	//    modeReqID=ReqID 'when' preModeConditions+=MODECONDITION (preRelations+=RELATION preModeConditions+=(STATECONDITON
	//    | ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))*  ',' 'then' postModeCondition = MODECONDITION '.'
	//;
	public MODEElements getMODEAccess() {
		return pMODE;
	}
	
	public ParserRule getMODERule() {
		return getMODEAccess().getRule();
	}
	
	//STATE:
	//    stateReqID=ReqID 'when' preStateConditions+=STATECONDITON (relations+=RELATION preStateConditions+=(STATECONDITON |
	//    ATTRIBUTECONTION | MODECONDITION | SIGNALCONDITION))* ',' 'then' postStateCondition=STATECONDITON '.'
	//;
	public STATEElements getSTATEAccess() {
		return pSTATE;
	}
	
	public ParserRule getSTATERule() {
		return getSTATEAccess().getRule();
	}
	
	//CONSTRAINT:
	//    constraintReqID=ReqID 'when' preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION |
	//    SIGNALCONDITION)*  (relations+=RELATION preConstraintConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION
	//    | SIGNALCONDITION))* ',' 'then' postConstraintCondition=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION | ARITHMETICCONDITION)'.'
	//;
	public CONSTRAINTElements getCONSTRAINTAccess() {
		return pCONSTRAINT;
	}
	
	public ParserRule getCONSTRAINTRule() {
		return getCONSTRAINTAccess().getRule();
	}
	
	//PROPERTY:
	//    propertyReqID=ReqID 'when' preOperator= (CTLOperator | LTLOperator) prePropertyConditions+=(STATECONDITON |
	//    ATTRIBUTECONTION | MODECONDITION)*  (preRelations+=RELATION prePropertyConditions+=(STATECONDITON |
	//    ATTRIBUTECONTION | MODECONDITION))* ',' 'then' postOperator=(CTLOperator | LTLOperator) postPropertyConditions+=(STATECONDITON |
	//    ATTRIBUTECONTION | MODECONDITION)*  (postRelations+=RELATION postPropertyConditions+=(STATECONDITON | ATTRIBUTECONTION | MODECONDITION))* '.'
	//;
	public PROPERTYElements getPROPERTYAccess() {
		return pPROPERTY;
	}
	
	public ParserRule getPROPERTYRule() {
		return getPROPERTYAccess().getRule();
	}
	
	//RANG:
	//    compOperator1=COMPARISONOPERATOR bound1=ATTRIBUTEVALUE 'and' compOperator2=COMPARISONOPERATOR bound2=ATTRIBUTEVALUE unit=UNIT
	//;
	public RANGElements getRANGAccess() {
		return pRANG;
	}
	
	public ParserRule getRANGRule() {
		return getRANGAccess().getRule();
	}
	
	//CTLOperator:
	//    AG | AF | EF | EG | AX
	//;
	public CTLOperatorElements getCTLOperatorAccess() {
		return pCTLOperator;
	}
	
	public ParserRule getCTLOperatorRule() {
		return getCTLOperatorAccess().getRule();
	}
	
	//AX:
	//    ax='all' 'next'
	//;
	public AXElements getAXAccess() {
		return pAX;
	}
	
	public ParserRule getAXRule() {
		return getAXAccess().getRule();
	}
	
	//EG:
	//    eg='exist' 'globally'
	//;
	public EGElements getEGAccess() {
		return pEG;
	}
	
	public ParserRule getEGRule() {
		return getEGAccess().getRule();
	}
	
	//EF:
	//    ef='exist' 'future'
	//;
	public EFElements getEFAccess() {
		return pEF;
	}
	
	public ParserRule getEFRule() {
		return getEFAccess().getRule();
	}
	
	//AF:
	//    af='all' 'future'
	//;
	public AFElements getAFAccess() {
		return pAF;
	}
	
	public ParserRule getAFRule() {
		return getAFAccess().getRule();
	}
	
	//AG:
	//    ag='all' 'globally'
	//;
	public AGElements getAGAccess() {
		return pAG;
	}
	
	public ParserRule getAGRule() {
		return getAGAccess().getRule();
	}
	
	//LTLOperator:
	//    F | G | X
	//;
	public LTLOperatorElements getLTLOperatorAccess() {
		return pLTLOperator;
	}
	
	public ParserRule getLTLOperatorRule() {
		return getLTLOperatorAccess().getRule();
	}
	
	//F:
	//    f='future'
	//;
	public FElements getFAccess() {
		return pF;
	}
	
	public ParserRule getFRule() {
		return getFAccess().getRule();
	}
	
	//G:
	//    g='globally'
	//;
	public GElements getGAccess() {
		return pG;
	}
	
	public ParserRule getGRule() {
		return getGAccess().getRule();
	}
	
	//X:
	//    x='next'
	//;
	public XElements getXAccess() {
		return pX;
	}
	
	public ParserRule getXRule() {
		return getXAccess().getRule();
	}
	
	//RELATION:
	//    relaion=('and' | 'or')
	//;
	public RELATIONElements getRELATIONAccess() {
		return pRELATION;
	}
	
	public ParserRule getRELATIONRule() {
		return getRELATIONAccess().getRule();
	}
	
	//SIGNALCONDITION:
	//    ID (ID)* 'receives' signalName=ID ID
	//;
	public SIGNALCONDITIONElements getSIGNALCONDITIONAccess() {
		return pSIGNALCONDITION;
	}
	
	public ParserRule getSIGNALCONDITIONRule() {
		return getSIGNALCONDITIONAccess().getRule();
	}
	
	//ReqID:
	//    '[' reqID+=INT ('.'reqID+=INT)* ']'
	//;
	public ReqIDElements getReqIDAccess() {
		return pReqID;
	}
	
	public ParserRule getReqIDRule() {
		return getReqIDAccess().getRule();
	}
	
	//ATTRIBUTECONTION:
	//    ID (ID)* attributeName=ID ID operator=COMPARISONOPERATOR attributeValue=ATTRIBUTEVALUE (unit+=UNIT)*
	//;
	public ATTRIBUTECONTIONElements getATTRIBUTECONTIONAccess() {
		return pATTRIBUTECONTION;
	}
	
	public ParserRule getATTRIBUTECONTIONRule() {
		return getATTRIBUTECONTIONAccess().getRule();
	}
	
	//UNIT:
	//    SPEED | ACC | TIME | WEIGHT
	//;
	public UNITElements getUNITAccess() {
		return pUNIT;
	}
	
	public ParserRule getUNITRule() {
		return getUNITAccess().getRule();
	}
	
	//ACC:
	//    acc='m/s2'
	//;
	public ACCElements getACCAccess() {
		return pACC;
	}
	
	public ParserRule getACCRule() {
		return getACCAccess().getRule();
	}
	
	//WEIGHT:
	//    weight='kg'
	//;
	public WEIGHTElements getWEIGHTAccess() {
		return pWEIGHT;
	}
	
	public ParserRule getWEIGHTRule() {
		return getWEIGHTAccess().getRule();
	}
	
	//TIME:
	//    time='s'
	//;
	public TIMEElements getTIMEAccess() {
		return pTIME;
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//SPEED:
	//    speed='km/h'
	//;
	public SPEEDElements getSPEEDAccess() {
		return pSPEED;
	}
	
	public ParserRule getSPEEDRule() {
		return getSPEEDAccess().getRule();
	}
	
	//ATTRIBUTEVALUE:
	//    INTTYPE | STRINGTYPE | BOOLEANTYPE
	//;
	public ATTRIBUTEVALUEElements getATTRIBUTEVALUEAccess() {
		return pATTRIBUTEVALUE;
	}
	
	public ParserRule getATTRIBUTEVALUERule() {
		return getATTRIBUTEVALUEAccess().getRule();
	}
	
	//STRINGTYPE:
	//    string=STRING
	//;
	public STRINGTYPEElements getSTRINGTYPEAccess() {
		return pSTRINGTYPE;
	}
	
	public ParserRule getSTRINGTYPERule() {
		return getSTRINGTYPEAccess().getRule();
	}
	
	//INTTYPE:
	//    int=INT
	//;
	public INTTYPEElements getINTTYPEAccess() {
		return pINTTYPE;
	}
	
	public ParserRule getINTTYPERule() {
		return getINTTYPEAccess().getRule();
	}
	
	//BOOLEANTYPE:
	//    value=('TRUE' | 'FALSE')
	//;
	public BOOLEANTYPEElements getBOOLEANTYPEAccess() {
		return pBOOLEANTYPE;
	}
	
	public ParserRule getBOOLEANTYPERule() {
		return getBOOLEANTYPEAccess().getRule();
	}
	
	//STATECONDITON:
	//    ((ID (ID)* 'state' stateName=ID) | ((ID)* compOperator=COMPARISONOPERATOR) (ID)* 'state' stateName=ID)
	//;
	public STATECONDITONElements getSTATECONDITONAccess() {
		return pSTATECONDITON;
	}
	
	public ParserRule getSTATECONDITONRule() {
		return getSTATECONDITONAccess().getRule();
	}
	
	//MODECONDITION:
	//    ID (ID)* 'mode' modeName=ID
	//;
	public MODECONDITIONElements getMODECONDITIONAccess() {
		return pMODECONDITION;
	}
	
	public ParserRule getMODECONDITIONRule() {
		return getMODECONDITIONAccess().getRule();
	}
	
	//ARITHMETICCONDITION:
	//    ID result=ID (ID)* compcondition=COMPARISONOPERATOR var1=ID arithmeticOperator=ARITHMETICOPERATOR (var2 = ID | var3 =INT )
	//;
	public ARITHMETICCONDITIONElements getARITHMETICCONDITIONAccess() {
		return pARITHMETICCONDITION;
	}
	
	public ParserRule getARITHMETICCONDITIONRule() {
		return getARITHMETICCONDITIONAccess().getRule();
	}
	
	//ARITHMETICOPERATOR:
	//    (ADD | SUBTRACTION | MULTIPLICATION | DIVISION | MODULE)
	//;
	public ARITHMETICOPERATORElements getARITHMETICOPERATORAccess() {
		return pARITHMETICOPERATOR;
	}
	
	public ParserRule getARITHMETICOPERATORRule() {
		return getARITHMETICOPERATORAccess().getRule();
	}
	
	//MODULE:
	//    add='moduled' 'by'
	//;
	public MODULEElements getMODULEAccess() {
		return pMODULE;
	}
	
	public ParserRule getMODULERule() {
		return getMODULEAccess().getRule();
	}
	
	//DIVISION:
	//    division='divided' 'by'
	//;
	public DIVISIONElements getDIVISIONAccess() {
		return pDIVISION;
	}
	
	public ParserRule getDIVISIONRule() {
		return getDIVISIONAccess().getRule();
	}
	
	//MULTIPLICATION:
	//    multiplication='multiplied' 'by'
	//;
	public MULTIPLICATIONElements getMULTIPLICATIONAccess() {
		return pMULTIPLICATION;
	}
	
	public ParserRule getMULTIPLICATIONRule() {
		return getMULTIPLICATIONAccess().getRule();
	}
	
	//SUBTRACTION:
	//    substraction='subtracted' 'by'
	//;
	public SUBTRACTIONElements getSUBTRACTIONAccess() {
		return pSUBTRACTION;
	}
	
	public ParserRule getSUBTRACTIONRule() {
		return getSUBTRACTIONAccess().getRule();
	}
	
	//ADD:
	//    add='added' 'by'
	//;
	public ADDElements getADDAccess() {
		return pADD;
	}
	
	public ParserRule getADDRule() {
		return getADDAccess().getRule();
	}
	
	//COMPARISONOPERATOR:
	//     (EQUAL | LESS | GREATER | NOTEQUAL | LESSEQUAL | GREATEQUAL | NOT)
	//;
	public COMPARISONOPERATORElements getCOMPARISONOPERATORAccess() {
		return pCOMPARISONOPERATOR;
	}
	
	public ParserRule getCOMPARISONOPERATORRule() {
		return getCOMPARISONOPERATORAccess().getRule();
	}
	
	//NOT:
	//    not="not"
	//;
	public NOTElements getNOTAccess() {
		return pNOT;
	}
	
	public ParserRule getNOTRule() {
		return getNOTAccess().getRule();
	}
	
	//GREATEQUAL:
	//    greateEqual+='greater' greateEqual+='or' greateEqual+='equal' greateEqual+='to'
	//;
	public GREATEQUALElements getGREATEQUALAccess() {
		return pGREATEQUAL;
	}
	
	public ParserRule getGREATEQUALRule() {
		return getGREATEQUALAccess().getRule();
	}
	
	//LESSEQUAL:
	//    lessEqual='less' 'or' 'equal' 'to'
	//;
	public LESSEQUALElements getLESSEQUALAccess() {
		return pLESSEQUAL;
	}
	
	public ParserRule getLESSEQUALRule() {
		return getLESSEQUALAccess().getRule();
	}
	
	//NOTEQUAL:
	//    notEqual='not' 'equal' 'to'
	//;
	public NOTEQUALElements getNOTEQUALAccess() {
		return pNOTEQUAL;
	}
	
	public ParserRule getNOTEQUALRule() {
		return getNOTEQUALAccess().getRule();
	}
	
	//GREATER:
	//    greater='greater' 'than'
	//;
	public GREATERElements getGREATERAccess() {
		return pGREATER;
	}
	
	public ParserRule getGREATERRule() {
		return getGREATERAccess().getRule();
	}
	
	//LESS:
	//    less+='less' less+='than'
	//;
	public LESSElements getLESSAccess() {
		return pLESS;
	}
	
	public ParserRule getLESSRule() {
		return getLESSAccess().getRule();
	}
	
	//EQUAL:
	//    equal='equal' 'to'
	//;
	public EQUALElements getEQUALAccess() {
		return pEQUAL;
	}
	
	public ParserRule getEQUALRule() {
		return getEQUALAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
