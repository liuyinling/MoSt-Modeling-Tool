/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mostml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mostml.ide.contentassist.antlr.internal.InternalMoStMLParser;
import org.xtext.example.mostml.services.MoStMLGrammarAccess;

public class MoStMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MoStMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MoStMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMoStAccess().getModelAlternatives_0(), "rule__MoSt__ModelAlternatives_0");
			builder.put(grammarAccess.getRequirementAccess().getAlternatives(), "rule__Requirement__Alternatives");
			builder.put(grammarAccess.getEnvironmentAccess().getAlternatives_4(), "rule__Environment__Alternatives_4");
			builder.put(grammarAccess.getMODEAccess().getPreModeConditionsAlternatives_3_1_0(), "rule__MODE__PreModeConditionsAlternatives_3_1_0");
			builder.put(grammarAccess.getSTATEAccess().getPreStateConditionsAlternatives_3_1_0(), "rule__STATE__PreStateConditionsAlternatives_3_1_0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPreConstraintConditionsAlternatives_2_0(), "rule__CONSTRAINT__PreConstraintConditionsAlternatives_2_0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPreConstraintConditionsAlternatives_3_1_0(), "rule__CONSTRAINT__PreConstraintConditionsAlternatives_3_1_0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPostConstraintConditionAlternatives_6_0(), "rule__CONSTRAINT__PostConstraintConditionAlternatives_6_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPreOperatorAlternatives_2_0(), "rule__PROPERTY__PreOperatorAlternatives_2_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPrePropertyConditionsAlternatives_3_0(), "rule__PROPERTY__PrePropertyConditionsAlternatives_3_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPrePropertyConditionsAlternatives_4_1_0(), "rule__PROPERTY__PrePropertyConditionsAlternatives_4_1_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPostOperatorAlternatives_7_0(), "rule__PROPERTY__PostOperatorAlternatives_7_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPostPropertyConditionsAlternatives_8_0(), "rule__PROPERTY__PostPropertyConditionsAlternatives_8_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPostPropertyConditionsAlternatives_9_1_0(), "rule__PROPERTY__PostPropertyConditionsAlternatives_9_1_0");
			builder.put(grammarAccess.getCTLOperatorAccess().getAlternatives(), "rule__CTLOperator__Alternatives");
			builder.put(grammarAccess.getLTLOperatorAccess().getAlternatives(), "rule__LTLOperator__Alternatives");
			builder.put(grammarAccess.getRELATIONAccess().getRelaionAlternatives_0(), "rule__RELATION__RelaionAlternatives_0");
			builder.put(grammarAccess.getUNITAccess().getAlternatives(), "rule__UNIT__Alternatives");
			builder.put(grammarAccess.getATTRIBUTEVALUEAccess().getAlternatives(), "rule__ATTRIBUTEVALUE__Alternatives");
			builder.put(grammarAccess.getBOOLEANTYPEAccess().getValueAlternatives_0(), "rule__BOOLEANTYPE__ValueAlternatives_0");
			builder.put(grammarAccess.getSTATECONDITONAccess().getAlternatives(), "rule__STATECONDITON__Alternatives");
			builder.put(grammarAccess.getARITHMETICOPERATORAccess().getAlternatives(), "rule__ARITHMETICOPERATOR__Alternatives");
			builder.put(grammarAccess.getCOMPARISONOPERATORAccess().getAlternatives(), "rule__COMPARISONOPERATOR__Alternatives");
			builder.put(grammarAccess.getNLRequirementAccess().getGroup(), "rule__NLRequirement__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_4_0(), "rule__Environment__Group_4_0__0");
			builder.put(grammarAccess.getMODEAccess().getGroup(), "rule__MODE__Group__0");
			builder.put(grammarAccess.getMODEAccess().getGroup_3(), "rule__MODE__Group_3__0");
			builder.put(grammarAccess.getSTATEAccess().getGroup(), "rule__STATE__Group__0");
			builder.put(grammarAccess.getSTATEAccess().getGroup_3(), "rule__STATE__Group_3__0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getGroup(), "rule__CONSTRAINT__Group__0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getGroup_3(), "rule__CONSTRAINT__Group_3__0");
			builder.put(grammarAccess.getPROPERTYAccess().getGroup(), "rule__PROPERTY__Group__0");
			builder.put(grammarAccess.getPROPERTYAccess().getGroup_4(), "rule__PROPERTY__Group_4__0");
			builder.put(grammarAccess.getPROPERTYAccess().getGroup_9(), "rule__PROPERTY__Group_9__0");
			builder.put(grammarAccess.getRANGAccess().getGroup(), "rule__RANG__Group__0");
			builder.put(grammarAccess.getAXAccess().getGroup(), "rule__AX__Group__0");
			builder.put(grammarAccess.getEGAccess().getGroup(), "rule__EG__Group__0");
			builder.put(grammarAccess.getEFAccess().getGroup(), "rule__EF__Group__0");
			builder.put(grammarAccess.getAFAccess().getGroup(), "rule__AF__Group__0");
			builder.put(grammarAccess.getAGAccess().getGroup(), "rule__AG__Group__0");
			builder.put(grammarAccess.getSIGNALCONDITIONAccess().getGroup(), "rule__SIGNALCONDITION__Group__0");
			builder.put(grammarAccess.getReqIDAccess().getGroup(), "rule__ReqID__Group__0");
			builder.put(grammarAccess.getReqIDAccess().getGroup_2(), "rule__ReqID__Group_2__0");
			builder.put(grammarAccess.getATTRIBUTECONTIONAccess().getGroup(), "rule__ATTRIBUTECONTION__Group__0");
			builder.put(grammarAccess.getSTATECONDITONAccess().getGroup_0(), "rule__STATECONDITON__Group_0__0");
			builder.put(grammarAccess.getSTATECONDITONAccess().getGroup_1(), "rule__STATECONDITON__Group_1__0");
			builder.put(grammarAccess.getSTATECONDITONAccess().getGroup_1_0(), "rule__STATECONDITON__Group_1_0__0");
			builder.put(grammarAccess.getMODECONDITIONAccess().getGroup(), "rule__MODECONDITION__Group__0");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getGroup(), "rule__ARITHMETICCONDITION__Group__0");
			builder.put(grammarAccess.getMODULEAccess().getGroup(), "rule__MODULE__Group__0");
			builder.put(grammarAccess.getDIVISIONAccess().getGroup(), "rule__DIVISION__Group__0");
			builder.put(grammarAccess.getMULTIPLICATIONAccess().getGroup(), "rule__MULTIPLICATION__Group__0");
			builder.put(grammarAccess.getSUBTRACTIONAccess().getGroup(), "rule__SUBTRACTION__Group__0");
			builder.put(grammarAccess.getADDAccess().getGroup(), "rule__ADD__Group__0");
			builder.put(grammarAccess.getGREATEQUALAccess().getGroup(), "rule__GREATEQUAL__Group__0");
			builder.put(grammarAccess.getLESSEQUALAccess().getGroup(), "rule__LESSEQUAL__Group__0");
			builder.put(grammarAccess.getNOTEQUALAccess().getGroup(), "rule__NOTEQUAL__Group__0");
			builder.put(grammarAccess.getGREATERAccess().getGroup(), "rule__GREATER__Group__0");
			builder.put(grammarAccess.getLESSAccess().getGroup(), "rule__LESS__Group__0");
			builder.put(grammarAccess.getEQUALAccess().getGroup(), "rule__EQUAL__Group__0");
			builder.put(grammarAccess.getMoStAccess().getModelAssignment(), "rule__MoSt__ModelAssignment");
			builder.put(grammarAccess.getNLRequirementAccess().getNlReqIDAssignment_0(), "rule__NLRequirement__NlReqIDAssignment_0");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvirReqIDAssignment_0(), "rule__Environment__EnvirReqIDAssignment_0");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvirVariableAssignment_2(), "rule__Environment__EnvirVariableAssignment_2");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvirAttributeValueAssignment_4_0_2(), "rule__Environment__EnvirAttributeValueAssignment_4_0_2");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvirUnitAssignment_4_0_3(), "rule__Environment__EnvirUnitAssignment_4_0_3");
			builder.put(grammarAccess.getEnvironmentAccess().getRangeAssignment_4_1(), "rule__Environment__RangeAssignment_4_1");
			builder.put(grammarAccess.getMODEAccess().getModeReqIDAssignment_0(), "rule__MODE__ModeReqIDAssignment_0");
			builder.put(grammarAccess.getMODEAccess().getPreModeConditionsAssignment_2(), "rule__MODE__PreModeConditionsAssignment_2");
			builder.put(grammarAccess.getMODEAccess().getPreRelationsAssignment_3_0(), "rule__MODE__PreRelationsAssignment_3_0");
			builder.put(grammarAccess.getMODEAccess().getPreModeConditionsAssignment_3_1(), "rule__MODE__PreModeConditionsAssignment_3_1");
			builder.put(grammarAccess.getMODEAccess().getPostModeConditionAssignment_6(), "rule__MODE__PostModeConditionAssignment_6");
			builder.put(grammarAccess.getSTATEAccess().getStateReqIDAssignment_0(), "rule__STATE__StateReqIDAssignment_0");
			builder.put(grammarAccess.getSTATEAccess().getPreStateConditionsAssignment_2(), "rule__STATE__PreStateConditionsAssignment_2");
			builder.put(grammarAccess.getSTATEAccess().getRelationsAssignment_3_0(), "rule__STATE__RelationsAssignment_3_0");
			builder.put(grammarAccess.getSTATEAccess().getPreStateConditionsAssignment_3_1(), "rule__STATE__PreStateConditionsAssignment_3_1");
			builder.put(grammarAccess.getSTATEAccess().getPostStateConditionsAssignment_6(), "rule__STATE__PostStateConditionsAssignment_6");
			builder.put(grammarAccess.getCONSTRAINTAccess().getConstraintReqIDAssignment_0(), "rule__CONSTRAINT__ConstraintReqIDAssignment_0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPreConstraintConditionsAssignment_2(), "rule__CONSTRAINT__PreConstraintConditionsAssignment_2");
			builder.put(grammarAccess.getCONSTRAINTAccess().getRelationsAssignment_3_0(), "rule__CONSTRAINT__RelationsAssignment_3_0");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPreConstraintConditionsAssignment_3_1(), "rule__CONSTRAINT__PreConstraintConditionsAssignment_3_1");
			builder.put(grammarAccess.getCONSTRAINTAccess().getPostConstraintConditionAssignment_6(), "rule__CONSTRAINT__PostConstraintConditionAssignment_6");
			builder.put(grammarAccess.getPROPERTYAccess().getPropertyReqIDAssignment_0(), "rule__PROPERTY__PropertyReqIDAssignment_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPreOperatorAssignment_2(), "rule__PROPERTY__PreOperatorAssignment_2");
			builder.put(grammarAccess.getPROPERTYAccess().getPrePropertyConditionsAssignment_3(), "rule__PROPERTY__PrePropertyConditionsAssignment_3");
			builder.put(grammarAccess.getPROPERTYAccess().getPreRelationsAssignment_4_0(), "rule__PROPERTY__PreRelationsAssignment_4_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPrePropertyConditionsAssignment_4_1(), "rule__PROPERTY__PrePropertyConditionsAssignment_4_1");
			builder.put(grammarAccess.getPROPERTYAccess().getPostOperatorAssignment_7(), "rule__PROPERTY__PostOperatorAssignment_7");
			builder.put(grammarAccess.getPROPERTYAccess().getPostPropertyConditionsAssignment_8(), "rule__PROPERTY__PostPropertyConditionsAssignment_8");
			builder.put(grammarAccess.getPROPERTYAccess().getPostRelationsAssignment_9_0(), "rule__PROPERTY__PostRelationsAssignment_9_0");
			builder.put(grammarAccess.getPROPERTYAccess().getPostPropertyConditionsAssignment_9_1(), "rule__PROPERTY__PostPropertyConditionsAssignment_9_1");
			builder.put(grammarAccess.getRANGAccess().getCompOperator1Assignment_0(), "rule__RANG__CompOperator1Assignment_0");
			builder.put(grammarAccess.getRANGAccess().getBound1Assignment_1(), "rule__RANG__Bound1Assignment_1");
			builder.put(grammarAccess.getRANGAccess().getCompOperator2Assignment_2(), "rule__RANG__CompOperator2Assignment_2");
			builder.put(grammarAccess.getRANGAccess().getBound2Assignment_3(), "rule__RANG__Bound2Assignment_3");
			builder.put(grammarAccess.getRANGAccess().getUnitAssignment_4(), "rule__RANG__UnitAssignment_4");
			builder.put(grammarAccess.getAXAccess().getAxAssignment_0(), "rule__AX__AxAssignment_0");
			builder.put(grammarAccess.getEGAccess().getEgAssignment_0(), "rule__EG__EgAssignment_0");
			builder.put(grammarAccess.getEFAccess().getEfAssignment_0(), "rule__EF__EfAssignment_0");
			builder.put(grammarAccess.getAFAccess().getAfAssignment_0(), "rule__AF__AfAssignment_0");
			builder.put(grammarAccess.getAGAccess().getAgAssignment_0(), "rule__AG__AgAssignment_0");
			builder.put(grammarAccess.getFAccess().getFAssignment(), "rule__F__FAssignment");
			builder.put(grammarAccess.getGAccess().getGAssignment(), "rule__G__GAssignment");
			builder.put(grammarAccess.getXAccess().getXAssignment(), "rule__X__XAssignment");
			builder.put(grammarAccess.getRELATIONAccess().getRelaionAssignment(), "rule__RELATION__RelaionAssignment");
			builder.put(grammarAccess.getSIGNALCONDITIONAccess().getSignalNameAssignment_3(), "rule__SIGNALCONDITION__SignalNameAssignment_3");
			builder.put(grammarAccess.getReqIDAccess().getReqIDAssignment_1(), "rule__ReqID__ReqIDAssignment_1");
			builder.put(grammarAccess.getReqIDAccess().getReqIDAssignment_2_1(), "rule__ReqID__ReqIDAssignment_2_1");
			builder.put(grammarAccess.getATTRIBUTECONTIONAccess().getAttributeNameAssignment_2(), "rule__ATTRIBUTECONTION__AttributeNameAssignment_2");
			builder.put(grammarAccess.getATTRIBUTECONTIONAccess().getOperatorAssignment_4(), "rule__ATTRIBUTECONTION__OperatorAssignment_4");
			builder.put(grammarAccess.getATTRIBUTECONTIONAccess().getAttributeValueAssignment_5(), "rule__ATTRIBUTECONTION__AttributeValueAssignment_5");
			builder.put(grammarAccess.getATTRIBUTECONTIONAccess().getUnitAssignment_6(), "rule__ATTRIBUTECONTION__UnitAssignment_6");
			builder.put(grammarAccess.getWEIGHTAccess().getWeightAssignment(), "rule__WEIGHT__WeightAssignment");
			builder.put(grammarAccess.getTIMEAccess().getTimeAssignment(), "rule__TIME__TimeAssignment");
			builder.put(grammarAccess.getSPEEDAccess().getSpeedAssignment(), "rule__SPEED__SpeedAssignment");
			builder.put(grammarAccess.getSTRINGTYPEAccess().getStringAssignment(), "rule__STRINGTYPE__StringAssignment");
			builder.put(grammarAccess.getINTTYPEAccess().getIntAssignment(), "rule__INTTYPE__IntAssignment");
			builder.put(grammarAccess.getBOOLEANTYPEAccess().getValueAssignment(), "rule__BOOLEANTYPE__ValueAssignment");
			builder.put(grammarAccess.getSTATECONDITONAccess().getStateNameAssignment_0_3(), "rule__STATECONDITON__StateNameAssignment_0_3");
			builder.put(grammarAccess.getSTATECONDITONAccess().getCompOperatorAssignment_1_0_1(), "rule__STATECONDITON__CompOperatorAssignment_1_0_1");
			builder.put(grammarAccess.getSTATECONDITONAccess().getStateNameAssignment_1_3(), "rule__STATECONDITON__StateNameAssignment_1_3");
			builder.put(grammarAccess.getMODECONDITIONAccess().getModeNameAssignment_3(), "rule__MODECONDITION__ModeNameAssignment_3");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getResultAssignment_1(), "rule__ARITHMETICCONDITION__ResultAssignment_1");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getCompconditionAssignment_3(), "rule__ARITHMETICCONDITION__CompconditionAssignment_3");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getVar1Assignment_4(), "rule__ARITHMETICCONDITION__Var1Assignment_4");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getArithmeticOperatorAssignment_5(), "rule__ARITHMETICCONDITION__ArithmeticOperatorAssignment_5");
			builder.put(grammarAccess.getARITHMETICCONDITIONAccess().getVar2Assignment_6(), "rule__ARITHMETICCONDITION__Var2Assignment_6");
			builder.put(grammarAccess.getMODULEAccess().getAddAssignment_0(), "rule__MODULE__AddAssignment_0");
			builder.put(grammarAccess.getDIVISIONAccess().getDivisionAssignment_0(), "rule__DIVISION__DivisionAssignment_0");
			builder.put(grammarAccess.getMULTIPLICATIONAccess().getMultiplicationAssignment_0(), "rule__MULTIPLICATION__MultiplicationAssignment_0");
			builder.put(grammarAccess.getSUBTRACTIONAccess().getSubstractionAssignment_0(), "rule__SUBTRACTION__SubstractionAssignment_0");
			builder.put(grammarAccess.getADDAccess().getAddAssignment_0(), "rule__ADD__AddAssignment_0");
			builder.put(grammarAccess.getNOTAccess().getNotAssignment(), "rule__NOT__NotAssignment");
			builder.put(grammarAccess.getGREATEQUALAccess().getGreateEqualAssignment_0(), "rule__GREATEQUAL__GreateEqualAssignment_0");
			builder.put(grammarAccess.getGREATEQUALAccess().getGreateEqualAssignment_1(), "rule__GREATEQUAL__GreateEqualAssignment_1");
			builder.put(grammarAccess.getGREATEQUALAccess().getGreateEqualAssignment_2(), "rule__GREATEQUAL__GreateEqualAssignment_2");
			builder.put(grammarAccess.getGREATEQUALAccess().getGreateEqualAssignment_3(), "rule__GREATEQUAL__GreateEqualAssignment_3");
			builder.put(grammarAccess.getLESSEQUALAccess().getLessEqualAssignment_0(), "rule__LESSEQUAL__LessEqualAssignment_0");
			builder.put(grammarAccess.getNOTEQUALAccess().getNotEqualAssignment_0(), "rule__NOTEQUAL__NotEqualAssignment_0");
			builder.put(grammarAccess.getGREATERAccess().getGreaterAssignment_0(), "rule__GREATER__GreaterAssignment_0");
			builder.put(grammarAccess.getLESSAccess().getLessAssignment_0(), "rule__LESS__LessAssignment_0");
			builder.put(grammarAccess.getLESSAccess().getLessAssignment_1(), "rule__LESS__LessAssignment_1");
			builder.put(grammarAccess.getEQUALAccess().getEqualAssignment_0(), "rule__EQUAL__EqualAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MoStMLGrammarAccess grammarAccess;

	@Override
	protected InternalMoStMLParser createParser() {
		InternalMoStMLParser result = new InternalMoStMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MoStMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MoStMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
